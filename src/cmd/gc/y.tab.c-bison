
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 20 "go.y"

#include "go.h"


/* Line 189 of yacc.c  */
#line 78 "y.tab.c"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     LLITERAL = 258,
     LASOP = 259,
     LBREAK = 260,
     LCASE = 261,
     LCHAN = 262,
     LCOLAS = 263,
     LCONST = 264,
     LCONTINUE = 265,
     LDDD = 266,
     LDEFAULT = 267,
     LDEFER = 268,
     LELSE = 269,
     LFALL = 270,
     LFOR = 271,
     LFUNC = 272,
     LGO = 273,
     LGOTO = 274,
     LIF = 275,
     LIMPORT = 276,
     LINTERFACE = 277,
     LMAKE = 278,
     LMAP = 279,
     LNAME = 280,
     LNEW = 281,
     LPACKAGE = 282,
     LRANGE = 283,
     LRETURN = 284,
     LSELECT = 285,
     LSTRUCT = 286,
     LSWITCH = 287,
     LTYPE = 288,
     LVAR = 289,
     LANDAND = 290,
     LANDNOT = 291,
     LBODY = 292,
     LCOMM = 293,
     LDEC = 294,
     LEQ = 295,
     LGE = 296,
     LGT = 297,
     LIGNORE = 298,
     LINC = 299,
     LLE = 300,
     LLSH = 301,
     LLT = 302,
     LNE = 303,
     LOROR = 304,
     LRSH = 305,
     LSEMIBRACE = 306,
     NotPackage = 307,
     NotParen = 308,
     PreferToRightParen = 309,
     NotSemi = 310
   };
#endif
/* Tokens.  */
#define LLITERAL 258
#define LASOP 259
#define LBREAK 260
#define LCASE 261
#define LCHAN 262
#define LCOLAS 263
#define LCONST 264
#define LCONTINUE 265
#define LDDD 266
#define LDEFAULT 267
#define LDEFER 268
#define LELSE 269
#define LFALL 270
#define LFOR 271
#define LFUNC 272
#define LGO 273
#define LGOTO 274
#define LIF 275
#define LIMPORT 276
#define LINTERFACE 277
#define LMAKE 278
#define LMAP 279
#define LNAME 280
#define LNEW 281
#define LPACKAGE 282
#define LRANGE 283
#define LRETURN 284
#define LSELECT 285
#define LSTRUCT 286
#define LSWITCH 287
#define LTYPE 288
#define LVAR 289
#define LANDAND 290
#define LANDNOT 291
#define LBODY 292
#define LCOMM 293
#define LDEC 294
#define LEQ 295
#define LGE 296
#define LGT 297
#define LIGNORE 298
#define LINC 299
#define LLE 300
#define LLSH 301
#define LLT 302
#define LNE 303
#define LOROR 304
#define LRSH 305
#define LSEMIBRACE 306
#define NotPackage 307
#define NotParen 308
#define PreferToRightParen 309
#define NotSemi 310




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 23 "go.y"

	Node*		node;
	NodeList*		list;
	Type*		type;
	Sym*		sym;
	struct	Val	val;
	int		lint;



/* Line 214 of yacc.c  */
#line 235 "y.tab.c"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 247 "y.tab.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  4
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1790

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  79
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  127
/* YYNRULES -- Number of rules.  */
#define YYNRULES  319
/* YYNRULES -- Number of states.  */
#define YYNSTATES  610

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   310

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    73,     2,     2,    69,    58,    59,     2,
      62,    63,    56,    52,    77,    53,    65,    57,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    71,    68,
       2,    70,     2,    78,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    75,     2,    76,    55,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    66,    54,    72,    74,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    60,    61,    64,
      67
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     8,     9,    12,    13,    17,    18,    21,
      25,    32,    37,    41,    43,    47,    49,    52,    55,    58,
      59,    64,    65,    73,    76,    79,    82,    84,    87,    93,
      97,   100,   106,   114,   118,   121,   127,   131,   132,   136,
     142,   146,   151,   155,   157,   160,   162,   164,   167,   169,
     173,   177,   181,   184,   187,   191,   197,   203,   206,   207,
     212,   213,   218,   221,   222,   225,   226,   231,   236,   241,
     247,   249,   251,   254,   255,   259,   261,   265,   266,   271,
     272,   273,   279,   280,   284,   286,   290,   294,   298,   302,
     306,   310,   314,   318,   322,   326,   330,   334,   338,   342,
     346,   350,   354,   358,   362,   366,   368,   371,   374,   377,
     380,   383,   386,   389,   392,   397,   399,   401,   405,   409,
     415,   421,   426,   431,   433,   438,   443,   448,   450,   452,
     454,   456,   458,   460,   462,   464,   465,   467,   469,   471,
     473,   478,   483,   489,   491,   493,   495,   497,   499,   501,
     503,   507,   509,   511,   513,   516,   520,   522,   524,   526,
     528,   532,   534,   536,   538,   540,   542,   546,   551,   556,
     560,   564,   570,   572,   574,   577,   580,   586,   590,   596,
     600,   604,   608,   614,   623,   629,   630,   634,   635,   637,
     641,   643,   648,   649,   652,   654,   658,   660,   664,   666,
     670,   672,   676,   678,   682,   686,   689,   693,   695,   699,
     701,   704,   706,   711,   713,   716,   719,   721,   723,   727,
     728,   730,   731,   733,   735,   737,   739,   741,   743,   745,
     749,   751,   755,   757,   760,   763,   766,   769,   772,   775,
     777,   781,   783,   787,   789,   793,   795,   799,   801,   805,
     807,   809,   813,   817,   818,   821,   822,   824,   825,   827,
     828,   830,   831,   833,   834,   836,   837,   839,   840,   842,
     843,   845,   846,   848,   849,   851,   854,   858,   863,   869,
     873,   880,   890,   892,   894,   896,   898,   900,   904,   909,
     915,   920,   925,   928,   932,   936,   938,   941,   947,   950,
     953,   957,   961,   967,   968,   970,   974,   976,   978,   981,
     983,   987,   989,   990,   993,   995,   999,  1001,  1005,  1007
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
      80,     0,    -1,    82,    81,    84,   157,    -1,    -1,    27,
     134,    -1,    -1,    83,    89,    90,    -1,    -1,    84,    85,
      -1,    21,    86,   179,    -1,    21,    62,    87,   179,    63,
     179,    -1,    21,    62,    63,   179,    -1,    88,    89,    90,
      -1,    86,    -1,    87,    68,    86,    -1,     3,    -1,   134,
       3,    -1,    65,     3,    -1,    27,   134,    -1,    -1,    91,
     202,    69,    69,    -1,    -1,    21,    69,    69,    92,   202,
      69,    69,    -1,    94,   179,    -1,   150,   179,    -1,     1,
     179,    -1,    68,    -1,    34,    96,    -1,    34,    62,   158,
     179,    63,    -1,    34,    62,    63,    -1,     9,    97,    -1,
       9,    62,    97,   179,    63,    -1,     9,    62,    97,    68,
     159,   179,    63,    -1,     9,    62,    63,    -1,    33,   100,
      -1,    33,    62,   160,   179,    63,    -1,    33,    62,    63,
      -1,    -1,   174,   139,    95,    -1,   174,   139,    95,    70,
     175,    -1,   174,    70,   175,    -1,   174,   139,    70,   175,
      -1,   174,    70,   175,    -1,    97,    -1,   174,   139,    -1,
     174,    -1,   134,    -1,    99,   139,    -1,   124,    -1,   124,
       4,   124,    -1,   175,    70,   175,    -1,   175,     8,   175,
      -1,   124,    44,    -1,   124,    39,    -1,     6,   176,    71,
      -1,     6,   135,    70,   124,    71,    -1,     6,   135,     8,
     124,    71,    -1,    12,    71,    -1,    -1,    66,   104,   172,
      72,    -1,    -1,    37,   106,   108,    72,    -1,   102,   172,
      -1,    -1,   108,   107,    -1,    -1,    37,   110,   172,    72,
      -1,   175,    70,    28,   124,    -1,   175,     8,    28,   124,
      -1,   184,    68,   184,    68,   184,    -1,   184,    -1,   111,
      -1,   112,   109,    -1,    -1,    16,   115,   113,    -1,   184,
      -1,   184,    68,   184,    -1,    -1,    20,   118,   116,   109,
      -1,    -1,    -1,    32,   120,   116,   121,   105,    -1,    -1,
      30,   123,   105,    -1,   125,    -1,   124,    49,   124,    -1,
     124,    35,   124,    -1,   124,    40,   124,    -1,   124,    48,
     124,    -1,   124,    47,   124,    -1,   124,    45,   124,    -1,
     124,    41,   124,    -1,   124,    42,   124,    -1,   124,    52,
     124,    -1,   124,    53,   124,    -1,   124,    54,   124,    -1,
     124,    55,   124,    -1,   124,    56,   124,    -1,   124,    57,
     124,    -1,   124,    58,   124,    -1,   124,    59,   124,    -1,
     124,    36,   124,    -1,   124,    46,   124,    -1,   124,    50,
     124,    -1,   124,    38,   124,    -1,   127,    -1,    56,   125,
      -1,    59,   125,    -1,    52,   125,    -1,    53,   125,    -1,
      73,   125,    -1,    74,   125,    -1,    55,   125,    -1,    38,
     125,    -1,   127,    62,   183,    63,    -1,     3,    -1,   135,
      -1,   127,    65,   134,    -1,    62,   128,    63,    -1,   127,
      65,    62,   128,    63,    -1,   127,    65,    62,    33,    63,
      -1,   127,    75,   124,    76,    -1,   127,    75,   149,    76,
      -1,   126,    -1,   137,    62,   124,    63,    -1,   137,   130,
     178,    72,    -1,   127,    66,   178,    72,    -1,   156,    -1,
     124,    -1,   140,    -1,   139,    -1,    37,    -1,    66,    -1,
     134,    -1,   134,    -1,    -1,   131,    -1,    25,    -1,   134,
      -1,   131,    -1,    75,   181,    76,   139,    -1,    75,   138,
      76,   139,    -1,    24,    75,   139,    76,   139,    -1,   147,
      -1,    11,    -1,   146,    -1,   152,    -1,   144,    -1,   145,
      -1,   143,    -1,    62,   139,    63,    -1,   146,    -1,   152,
      -1,   144,    -1,    56,   140,    -1,    62,   140,    63,    -1,
     152,    -1,   144,    -1,   145,    -1,   143,    -1,    62,   139,
      63,    -1,   146,    -1,   144,    -1,   145,    -1,   143,    -1,
     135,    -1,   135,    65,   134,    -1,    75,   181,    76,   139,
      -1,    75,   138,    76,   139,    -1,    38,     7,   139,    -1,
       7,    38,   141,    -1,    24,    75,   139,    76,   139,    -1,
     147,    -1,   148,    -1,    56,   139,    -1,     7,   139,    -1,
      31,    66,   161,   179,    72,    -1,    31,    66,    72,    -1,
      22,    66,   162,   179,    72,    -1,    22,    66,    72,    -1,
     124,    71,   124,    -1,    17,   151,   153,    -1,   132,    62,
     170,    63,   154,    -1,    62,   170,    63,   131,    62,   170,
      63,   154,    -1,    17,    62,   170,    63,   154,    -1,    -1,
      66,   172,    72,    -1,    -1,   142,    -1,    62,   170,    63,
      -1,   152,    -1,   155,    66,   172,    72,    -1,    -1,   157,
      93,    -1,    96,    -1,   158,    68,    96,    -1,    98,    -1,
     159,    68,    98,    -1,   100,    -1,   160,    68,   100,    -1,
     163,    -1,   161,    68,   163,    -1,   166,    -1,   162,    68,
     166,    -1,   173,   139,   188,    -1,   165,   188,    -1,    56,
     165,   188,    -1,    25,    -1,    25,    65,   134,    -1,   164,
      -1,   131,   167,    -1,   164,    -1,    62,   170,    63,   154,
      -1,   129,    -1,   134,   129,    -1,   134,   138,    -1,   138,
      -1,   168,    -1,   169,    77,   168,    -1,    -1,   169,    -1,
      -1,   101,    -1,   103,    -1,    94,    -1,   114,    -1,   119,
      -1,   122,    -1,   117,    -1,   117,    14,   171,    -1,     1,
      -1,   136,    71,   171,    -1,    15,    -1,     5,   133,    -1,
      10,   133,    -1,    18,   126,    -1,    13,   126,    -1,    19,
     131,    -1,    29,   182,    -1,   171,    -1,   172,    68,   171,
      -1,   131,    -1,   173,    77,   131,    -1,   132,    -1,   174,
      77,   132,    -1,   124,    -1,   175,    77,   124,    -1,   128,
      -1,   176,    77,   128,    -1,   149,    -1,   124,    -1,   177,
      77,   149,    -1,   177,    77,   124,    -1,    -1,   177,   180,
      -1,    -1,    68,    -1,    -1,    77,    -1,    -1,   124,    -1,
      -1,   175,    -1,    -1,   176,    -1,    -1,   101,    -1,    -1,
     203,    -1,    -1,   204,    -1,    -1,   205,    -1,    -1,     3,
      -1,    27,   134,    -1,    34,   201,   191,    -1,     9,   201,
      70,   199,    -1,     9,   201,   191,    70,   199,    -1,    33,
     190,   191,    -1,    17,   201,    62,   185,    63,   197,    -1,
      17,    62,   203,    63,   134,    62,   185,    63,   197,    -1,
     201,    -1,   192,    -1,   193,    -1,   200,    -1,    25,    -1,
      75,    76,   191,    -1,    75,     3,    76,   191,    -1,    24,
      75,   191,    76,   191,    -1,    31,    66,   186,    72,    -1,
      22,    66,   187,    72,    -1,    56,   191,    -1,    38,     7,
     191,    -1,     7,    38,   192,    -1,    11,    -1,     7,   191,
      -1,    17,    62,   185,    63,   197,    -1,   134,   191,    -1,
      78,   191,    -1,   134,   191,   188,    -1,    78,   191,   188,
      -1,   134,    62,   185,    63,   197,    -1,    -1,   198,    -1,
      62,   185,    63,    -1,   192,    -1,     3,    -1,    53,     3,
      -1,   134,    -1,   134,    65,   134,    -1,   200,    -1,    -1,
     202,   189,    -1,   194,    -1,   203,    77,   194,    -1,   195,
      -1,   204,    68,   195,    -1,   196,    -1,   205,    68,   196,
      -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   121,   121,   130,   136,   147,   147,   156,   157,   160,
     161,   162,   165,   206,   207,   210,   218,   226,   235,   248,
     248,   258,   257,   271,   272,   276,   280,   287,   293,   298,
     303,   309,   316,   323,   328,   334,   339,   346,   352,   356,
     360,   366,   370,   376,   377,   381,   387,   396,   402,   406,
     411,   423,   435,   440,   447,   466,   475,   484,   501,   500,
     513,   512,   524,   531,   534,   541,   540,   551,   557,   566,
     577,   583,   586,   595,   594,   605,   611,   622,   621,   635,
     639,   634,   657,   656,   671,   672,   676,   680,   684,   688,
     692,   696,   700,   704,   708,   712,   716,   720,   724,   728,
     732,   736,   740,   744,   748,   754,   755,   759,   763,   767,
     771,   775,   780,   784,   794,   801,   805,   806,   817,   821,
     825,   829,   833,   837,   838,   844,   856,   862,   865,   866,
     869,   872,   876,   887,   893,   899,   902,   905,   908,   916,
     919,   924,   929,   934,   946,   952,   953,   954,   955,   956,
     957,   963,   964,   965,   966,   970,   976,   977,   978,   979,
     980,   986,   987,   988,   989,   992,   993,  1006,  1010,  1015,
    1020,  1025,  1029,  1030,  1033,  1039,  1046,  1055,  1062,  1068,
    1075,  1086,  1094,  1109,  1130,  1138,  1141,  1150,  1154,  1158,
    1164,  1170,  1183,  1186,  1194,  1195,  1201,  1202,  1208,  1212,
    1218,  1219,  1225,  1229,  1235,  1244,  1249,  1257,  1266,  1281,
    1287,  1291,  1297,  1309,  1310,  1316,  1322,  1325,  1329,  1335,
    1338,  1347,  1350,  1351,  1352,  1356,  1357,  1358,  1359,  1364,
    1370,  1374,  1383,  1388,  1392,  1396,  1400,  1404,  1408,  1415,
    1421,  1429,  1433,  1439,  1443,  1449,  1453,  1459,  1463,  1472,
    1476,  1480,  1484,  1490,  1493,  1502,  1503,  1505,  1506,  1509,
    1512,  1515,  1518,  1521,  1524,  1527,  1530,  1533,  1536,  1539,
    1542,  1545,  1548,  1551,  1554,  1561,  1563,  1567,  1571,  1575,
    1579,  1583,  1593,  1600,  1601,  1604,  1608,  1618,  1622,  1626,
    1630,  1634,  1639,  1643,  1649,  1655,  1661,  1667,  1673,  1677,
    1683,  1688,  1703,  1709,  1712,  1715,  1719,  1725,  1729,  1743,
    1751,  1757,  1763,  1764,  1767,  1771,  1777,  1781,  1787,  1791
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "LLITERAL", "LASOP", "LBREAK", "LCASE",
  "LCHAN", "LCOLAS", "LCONST", "LCONTINUE", "LDDD", "LDEFAULT", "LDEFER",
  "LELSE", "LFALL", "LFOR", "LFUNC", "LGO", "LGOTO", "LIF", "LIMPORT",
  "LINTERFACE", "LMAKE", "LMAP", "LNAME", "LNEW", "LPACKAGE", "LRANGE",
  "LRETURN", "LSELECT", "LSTRUCT", "LSWITCH", "LTYPE", "LVAR", "LANDAND",
  "LANDNOT", "LBODY", "LCOMM", "LDEC", "LEQ", "LGE", "LGT", "LIGNORE",
  "LINC", "LLE", "LLSH", "LLT", "LNE", "LOROR", "LRSH", "LSEMIBRACE",
  "'+'", "'-'", "'|'", "'^'", "'*'", "'/'", "'%'", "'&'", "NotPackage",
  "NotParen", "'('", "')'", "PreferToRightParen", "'.'", "'{'", "NotSemi",
  "';'", "'$'", "'='", "':'", "'}'", "'!'", "'~'", "'['", "']'", "','",
  "'?'", "$accept", "file", "package", "loadsys", "$@1", "imports",
  "import", "import_stmt", "import_stmt_list", "import_here",
  "import_package", "import_there", "$@2", "$@3", "xdcl", "common_dcl",
  "varoptsemi", "vardcl", "constdcl", "constdcl1", "typedclname",
  "typedcl", "simple_stmt", "case", "compound_stmt", "$@4", "switch_body",
  "$@5", "caseblock", "caseblock_list", "loop_body", "$@6", "range_stmt",
  "for_header", "for_body", "for_stmt", "$@7", "if_header", "if_stmt",
  "$@8", "switch_stmt", "$@9", "$@10", "select_stmt", "$@11", "expr",
  "uexpr", "pseudocall", "pexpr", "expr_or_type", "name_or_type", "lbrace",
  "new_name", "dcl_name", "onew_name", "sym", "name", "labelname",
  "convtype", "dotdotdot", "ntype", "non_expr_type", "non_chan_type",
  "non_fn_type", "dotname", "othertype", "ptrtype", "chantype",
  "structtype", "interfacetype", "keyval", "xfndcl", "fndcl", "fntype",
  "fnbody", "fnres", "fnlitdcl", "fnliteral", "xdcl_list", "vardcl_list",
  "constdcl_list", "typedcl_list", "structdcl_list", "interfacedcl_list",
  "structdcl", "packname", "embed", "interfacedcl", "indcl", "arg_type",
  "arg_type_list", "oarg_type_list", "stmt", "stmt_list", "new_name_list",
  "dcl_name_list", "expr_list", "expr_or_type_list", "keyval_list",
  "braced_keyval_list", "osemi", "ocomma", "oexpr", "oexpr_list",
  "oexpr_or_type_list", "osimple_stmt", "ohidden_funarg_list",
  "ohidden_structdcl_list", "ohidden_interfacedcl_list", "oliteral",
  "hidden_import", "hidden_pkgtype", "hidden_type", "hidden_type1",
  "hidden_type2", "hidden_dcl", "hidden_structdcl", "hidden_interfacedcl",
  "ohidden_funres", "hidden_funres", "hidden_constant", "hidden_importsym",
  "hidden_pkg_importsym", "hidden_import_list", "hidden_funarg_list",
  "hidden_structdcl_list", "hidden_interfacedcl_list", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    43,    45,   124,    94,    42,    47,    37,    38,
     307,   308,    40,    41,   309,    46,   123,   310,    59,    36,
      61,    58,   125,    33,   126,    91,    93,    44,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    79,    80,    81,    81,    83,    82,    84,    84,    85,
      85,    85,    86,    87,    87,    88,    88,    88,    89,    91,
      90,    92,    90,    93,    93,    93,    93,    94,    94,    94,
      94,    94,    94,    94,    94,    94,    94,    95,    96,    96,
      96,    97,    97,    98,    98,    98,    99,   100,   101,   101,
     101,   101,   101,   101,   102,   102,   102,   102,   104,   103,
     106,   105,   107,   108,   108,   110,   109,   111,   111,   112,
     112,   112,   113,   115,   114,   116,   116,   118,   117,   120,
     121,   119,   123,   122,   124,   124,   124,   124,   124,   124,
     124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
     124,   124,   124,   124,   124,   125,   125,   125,   125,   125,
     125,   125,   125,   125,   126,   127,   127,   127,   127,   127,
     127,   127,   127,   127,   127,   127,   127,   127,   128,   128,
     129,   130,   130,   131,   132,   133,   133,   134,   135,   136,
     137,   137,   137,   137,   138,   139,   139,   139,   139,   139,
     139,   140,   140,   140,   140,   140,   141,   141,   141,   141,
     141,   142,   142,   142,   142,   143,   143,   144,   144,   144,
     144,   144,   144,   144,   145,   146,   147,   147,   148,   148,
     149,   150,   151,   151,   152,   153,   153,   154,   154,   154,
     155,   156,   157,   157,   158,   158,   159,   159,   160,   160,
     161,   161,   162,   162,   163,   163,   163,   164,   164,   165,
     166,   166,   167,   168,   168,   168,   168,   169,   169,   170,
     170,   171,   171,   171,   171,   171,   171,   171,   171,   171,
     171,   171,   171,   171,   171,   171,   171,   171,   171,   172,
     172,   173,   173,   174,   174,   175,   175,   176,   176,   177,
     177,   177,   177,   178,   178,   179,   179,   180,   180,   181,
     181,   182,   182,   183,   183,   184,   184,   185,   185,   186,
     186,   187,   187,   188,   188,   189,   189,   189,   189,   189,
     189,   189,   190,   191,   191,   192,   192,   192,   192,   192,
     192,   192,   192,   192,   192,   192,   193,   193,   194,   194,
     195,   195,   196,   197,   197,   198,   198,   199,   199,   199,
     200,   201,   202,   202,   203,   203,   204,   204,   205,   205
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     4,     0,     2,     0,     3,     0,     2,     3,
       6,     4,     3,     1,     3,     1,     2,     2,     2,     0,
       4,     0,     7,     2,     2,     2,     1,     2,     5,     3,
       2,     5,     7,     3,     2,     5,     3,     0,     3,     5,
       3,     4,     3,     1,     2,     1,     1,     2,     1,     3,
       3,     3,     2,     2,     3,     5,     5,     2,     0,     4,
       0,     4,     2,     0,     2,     0,     4,     4,     4,     5,
       1,     1,     2,     0,     3,     1,     3,     0,     4,     0,
       0,     5,     0,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     1,     2,     2,     2,     2,
       2,     2,     2,     2,     4,     1,     1,     3,     3,     5,
       5,     4,     4,     1,     4,     4,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     1,     1,     1,     1,
       4,     4,     5,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     2,     3,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     3,     4,     4,     3,
       3,     5,     1,     1,     2,     2,     5,     3,     5,     3,
       3,     3,     5,     8,     5,     0,     3,     0,     1,     3,
       1,     4,     0,     2,     1,     3,     1,     3,     1,     3,
       1,     3,     1,     3,     3,     2,     3,     1,     3,     1,
       2,     1,     4,     1,     2,     2,     1,     1,     3,     0,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     3,     1,     2,     2,     2,     2,     2,     2,     1,
       3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
       1,     3,     3,     0,     2,     0,     1,     0,     1,     0,
       1,     0,     1,     0,     1,     0,     1,     0,     1,     0,
       1,     0,     1,     0,     1,     2,     3,     4,     5,     3,
       6,     9,     1,     1,     1,     1,     1,     3,     4,     5,
       4,     4,     2,     3,     3,     1,     2,     5,     2,     2,
       3,     3,     5,     0,     1,     3,     1,     1,     2,     1,
       3,     1,     0,     2,     1,     3,     1,     3,     1,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       5,     0,     3,     0,     1,     0,     7,     0,    19,   137,
       4,   192,    18,     0,     6,   312,     0,     8,     0,     0,
       0,    15,     0,     0,   255,     0,     0,   255,     0,     0,
       0,     0,    26,   193,   255,   255,    21,     0,     0,     0,
       0,     0,     0,   313,   255,    13,   255,    17,   256,     9,
      19,    16,    25,     0,    30,   243,   134,     0,   219,     0,
     185,     0,     0,    34,    46,     0,    27,     0,    23,    24,
     312,     0,   311,     0,     0,     0,   275,     0,   282,     0,
      20,    11,   256,     0,    12,    33,   255,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,     0,   138,   165,
       0,   149,   147,   148,   145,   172,   173,   146,   144,   213,
     138,   216,   130,   217,   220,     0,   219,     0,   181,    36,
     198,   255,    47,    29,   194,   255,     0,    37,     0,     0,
       0,   295,     0,     0,     0,   286,     0,     0,     0,     0,
       0,     0,   283,   284,   285,     0,     0,   314,     0,   267,
     279,   276,    14,   255,   256,     0,     0,   175,   219,     0,
       0,     0,     0,   174,     0,   115,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,   245,    84,   123,
     105,   116,     0,   143,   190,     0,   127,    42,   260,     0,
       0,   244,     0,     0,   214,   215,     0,     0,     0,   230,
     135,   135,     0,   232,    73,     0,     0,    77,   261,    82,
      79,    58,   224,   222,   223,   225,   228,   226,   227,    48,
     139,   138,     0,   239,     0,     0,   256,     0,   256,     0,
      40,    38,     0,   310,     0,   296,   267,   271,     0,   269,
       0,   292,   307,     0,   309,   277,     0,     0,     0,   299,
     298,     0,     0,     0,   268,    10,    43,   196,   255,    45,
      31,     0,     0,   170,   159,   157,   158,   156,     0,   137,
     179,     0,   133,   255,   211,   202,     0,     0,   177,   241,
     255,   200,   209,   273,     0,   169,   150,     0,   113,   108,
     109,   112,   106,   107,     0,     0,     0,     0,   259,   128,
       0,   129,   153,   151,   143,   152,   110,   111,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     263,     0,   253,     0,   131,     0,   132,   253,     0,     0,
       0,     0,   166,    41,   218,     0,   187,   136,   233,   234,
     123,     0,   265,   123,   237,   265,   262,   238,     0,   265,
       0,     0,     0,    53,    52,     0,     0,   186,     0,     0,
     199,    35,   195,    28,     0,    22,     0,   294,     0,     0,
       0,   318,   272,     0,     0,     0,     0,   316,   270,   293,
     308,     0,   287,   278,     0,   315,   303,   256,     0,    44,
       0,   187,     0,   219,   210,   256,     0,     0,   207,   273,
     256,     0,   274,   205,     0,   273,     0,     0,   154,   129,
       0,     0,   118,     0,     0,    86,   101,   104,    87,    91,
      92,    90,   102,    89,    88,    85,   103,    93,    94,    95,
      96,    97,    98,    99,   100,   247,   264,     0,     0,   117,
     250,   249,   257,     0,     0,     0,     0,     0,     0,   246,
     168,   167,   219,   219,   188,   164,   162,   163,   161,   182,
     266,    71,     0,    74,     0,    70,     0,    75,    60,    83,
      80,     0,   229,    49,   231,   240,    51,    50,    39,   303,
     267,   291,     0,     0,   273,   273,   290,     0,   288,   267,
       0,   267,   306,   280,   304,   197,    32,   160,   184,   208,
       0,   203,   178,   171,   206,   201,   176,   242,   204,     0,
       0,     0,     0,   141,   140,     0,   114,     0,     0,     0,
     258,   254,   126,   121,   122,   124,   125,   191,     0,     0,
      65,    72,     0,     0,   265,    78,   265,    63,     0,    59,
     297,     0,   319,   289,   301,   300,   317,     0,     0,     0,
     187,   142,     0,   141,   140,   248,   120,   119,   180,   252,
     251,   187,   189,     0,     0,     0,     0,    76,     0,    81,
     303,   303,   305,   212,   142,   183,     0,    68,    67,   265,
       0,     0,    61,     0,    64,   302,   281,    66,    69,   116,
       0,    57,    62,     0,     0,    54,     0,     0,    56,    55
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     1,     6,     2,     3,    11,    17,    24,    46,    25,
       8,    14,    15,    70,    33,   212,   231,    66,   256,   257,
      62,    63,   213,   593,   214,   360,   479,   547,   594,   578,
     541,   573,   471,   472,   473,   215,   352,   476,   216,   355,
     217,   359,   548,   218,   358,   219,   178,   179,   180,   300,
     109,   337,   220,    55,   348,    98,   181,   222,   182,   111,
     112,   301,   263,   464,   101,   102,   103,   104,   183,   106,
     451,    35,    60,   184,   118,   469,   185,   186,    18,   125,
     258,   121,   280,   273,   281,   282,   283,   275,   404,   113,
     114,   115,   223,   224,   284,    67,   225,   446,   452,   453,
      49,   531,   190,   357,   447,   477,   253,   386,   380,   413,
      43,    77,   389,   142,   143,   147,   387,   381,   503,   504,
     245,   144,    73,    20,   254,   388,   382
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -472
static const yytype_int16 yypact[] =
{
    -472,    39,    27,    34,  -472,    48,  -472,    48,    95,  -472,
    -472,    97,  -472,    90,  -472,  -472,    73,  -472,   286,   106,
     282,  -472,   125,    60,   140,    34,   207,   140,   155,   160,
     164,   168,  -472,  -472,   140,   140,  -472,    48,   178,    48,
      48,    48,   147,  -472,   140,  -472,   177,  -472,  -472,  -472,
      95,  -472,  -472,    42,  -472,  -472,  -472,   541,  1441,   188,
     172,    59,  1461,  -472,  -472,   120,  -472,   735,  -472,  -472,
    -472,   194,  -472,   425,    53,   199,  -472,   674,  -472,   674,
    -472,  -472,   133,   226,  -472,  -472,   209,  1483,   232,   247,
     246,   262,   328,  1461,  1461,   880,  1267,    48,  -472,   288,
     292,  -472,  -472,  -472,  -472,  -472,  -472,  -472,  -472,  -472,
    1441,  -472,  -472,  -472,   296,   300,  1441,  1087,  -472,  -472,
    -472,   315,  -472,  -472,  -472,   316,   880,  -472,   368,    48,
    1012,  -472,   327,   322,   318,   325,   330,   392,   674,   126,
      37,   333,  -472,  -472,  -472,   674,   674,  -472,    -6,    53,
    -472,  -472,  -472,   140,    48,   341,  1487,  -472,  1441,     3,
    1461,   130,  1461,  -472,   349,  -472,   339,   880,   880,   880,
     880,   880,   880,  1241,   880,   880,  1267,  1658,  -472,  -472,
     303,  -472,   200,  -472,  -472,   350,  -472,   338,  1658,   342,
     344,  -472,    48,   880,  -472,  -472,  1441,    48,   354,  -472,
      48,    48,   145,  -472,  -472,   145,    48,  -472,   880,  -472,
    -472,  -472,  -472,  -472,  -472,  -472,   410,  -472,  -472,  1143,
    -472,   355,   357,  -472,   -17,    38,    48,   367,    48,   370,
     338,   361,   366,  -472,   482,  -472,    53,    48,   674,    54,
     674,  -472,  -472,   436,  -472,  -472,   365,   674,   126,  -472,
    -472,    48,    53,   380,   369,  -472,  -472,  -472,   376,   541,
    -472,  1483,  1461,  -472,  -472,  -472,  -472,  -472,   382,    49,
    -472,   386,  -472,   383,  -472,  -472,   379,   427,  -472,  -472,
     394,  -472,  -472,   457,  1400,  -472,  -472,  1461,  -472,  -472,
    -472,  -472,  -472,  -472,   389,  1314,  1241,  1241,  1267,  1658,
     404,  -472,  -472,  -472,   101,   402,  -472,  -472,   395,   396,
     880,   880,   880,   880,   880,   880,   880,   880,   880,   880,
     880,   880,   880,   880,   880,   880,   880,   880,   880,   880,
    1241,   179,   880,   880,  -472,   880,  -472,   880,  1087,   880,
    1461,  1461,  -472,   338,  -472,   408,   700,  -472,  -472,  -472,
      58,   303,   880,    75,  -472,   880,   338,  -472,   437,   880,
    1087,   958,   880,  -472,  -472,   958,   958,  -472,   880,   880,
    -472,  -472,  -472,  -472,   880,  -472,  1012,  -472,   414,   416,
     407,  -472,   415,   406,   674,   674,   418,  -472,   423,  -472,
    -472,   674,  -472,  -472,   424,  -472,   603,    48,   434,   292,
     439,   700,    48,  1441,  -472,   478,   433,  1461,   444,   457,
     157,   440,  -472,  -472,    48,   457,   438,  1461,  -472,  -472,
     441,   443,  -472,  1461,  1461,  1707,  -472,  1731,   599,   599,
     599,   599,  -472,   599,   599,  1683,  -472,   472,   472,   472,
     472,  -472,  -472,  -472,  -472,  -472,   446,   453,  1200,  -472,
    1551,  -472,   448,   449,  1519,   456,  1632,   461,    89,  1658,
    -472,  -472,  1441,  1441,  -472,  -472,  -472,  -472,  -472,  -472,
    -472,  -472,   497,  -472,    50,   467,   497,   468,  -472,  -472,
    -472,   176,  -472,  1658,  -472,  -472,   338,   338,   338,   603,
      53,  -472,    48,   674,   457,   457,  -472,    54,  -472,    53,
     499,    53,  -472,  -472,  -472,  -472,  -472,  -472,  -472,  -472,
     476,  -472,  -472,  -472,  -472,  -472,  -472,  -472,  -472,  1461,
     464,  1461,  1461,  -472,  -472,  1241,  -472,   480,   487,   880,
     880,  -472,  -472,  -472,  -472,  -472,  -472,  -472,   493,   496,
    -472,  -472,  1340,  1380,   880,  -472,   880,  -472,   437,  -472,
    -472,   501,  -472,  -472,  -472,  -472,  -472,   504,  1212,   506,
     700,  -472,  1461,   229,   234,  -472,  -472,  -472,  1658,  1551,
    -472,   700,  -472,  1087,   880,   880,   477,  -472,    74,  -472,
     603,   603,  -472,  -472,   241,  -472,   216,  1658,  1658,   880,
    1241,   502,  -472,   958,  -472,  -472,  -472,  -472,  -472,    23,
     -27,  -472,   479,   880,   880,  -472,  1578,  1605,  -472,  -472
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -472,  -472,  -472,  -472,  -472,  -472,  -472,    21,  -472,  -472,
     545,   530,  -472,  -472,  -472,   556,  -472,   -57,   183,   184,
    -472,   -52,  -293,  -472,  -472,  -472,    35,  -472,  -472,  -472,
     108,  -472,  -472,  -472,  -472,  -472,  -472,   223,  -472,  -472,
    -472,  -472,  -472,  -472,  -472,   524,   170,   129,   141,  -325,
     475,  -472,  -112,     0,   385,    -5,   484,  -472,  -472,   -80,
     654,   -29,  -472,  -472,  -152,   -91,  -149,  -131,   214,  -472,
    -311,  -472,  -472,   265,  -472,  -387,  -472,  -472,  -472,  -472,
    -472,  -472,  -472,  -472,   180,  -147,   310,   186,  -472,   393,
    -472,  -113,   -83,  -319,  -472,   -15,   -89,     2,  -472,   256,
      56,  -472,  -161,  -472,  -472,  -332,  -226,  -472,  -472,  -388,
    -472,  -472,    22,  -233,  -472,   346,    99,   107,  -471,  -472,
     353,   187,   326,   532,   533,  -472,  -472
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -246
static const yytype_int16 yytable[] =
{
      10,   377,    12,   198,   264,   445,   187,   266,   124,   120,
     378,    26,   274,    57,   508,   309,   189,    26,   550,   458,
     475,   514,   455,    56,    56,    64,    56,   518,   269,    59,
     195,   603,    71,    71,    76,    71,    71,   230,    57,     4,
     246,   481,   303,    45,   605,   268,   368,   271,    56,   279,
     525,   366,  -207,   110,     5,   367,    64,   251,   542,   470,
      56,     7,   470,    47,  -236,   265,   470,     9,    71,   146,
    -236,   252,    71,     9,    71,   270,    21,    26,     9,     9,
     590,  -235,   302,    52,     9,   345,   591,  -235,   347,   347,
      68,    69,    56,   604,   354,   141,   308,   191,     9,   150,
      81,   151,    83,   152,   343,    85,   554,   555,   369,   595,
     596,   110,   221,   247,   402,   339,    13,  -207,    16,   356,
     543,  -207,   119,   528,   233,    71,  -236,   339,    21,   242,
    -236,   145,   384,    71,   244,    22,    21,   421,    23,   259,
      71,    71,   155,  -235,   146,     9,   592,  -235,   165,    56,
       9,     9,   235,   110,   272,   269,   272,   366,     9,    19,
     241,   537,    88,   502,  -172,   303,   303,   249,   250,   166,
       9,   372,  -172,   583,   370,    36,    91,   227,  -172,   243,
       9,   229,   269,   123,   585,     9,   277,   342,    44,     9,
      23,   110,   272,     9,   465,   272,   272,   467,    23,   303,
     565,   272,   278,     9,     9,   302,   302,   173,    48,   255,
      51,    54,   576,   277,   577,   468,    80,    53,   420,   570,
     176,    64,    58,    56,    72,    72,    61,    72,    72,    71,
      65,   146,   379,    71,   385,    71,    86,   334,   117,   302,
      74,   448,    71,   244,   366,    82,   394,   146,   549,   465,
     116,   470,   467,   470,   586,   466,   502,   598,   274,   129,
     383,   149,   335,   474,   551,   445,   336,   418,   419,   392,
     468,   105,   105,   557,   602,   559,   105,   154,   482,   486,
     487,   105,   484,   485,   366,   488,    -2,    27,   597,   153,
     510,    37,  -168,   271,   158,    28,   470,  -167,   279,    38,
    -168,   105,   517,    29,  -171,  -167,  -168,   105,   105,    39,
     466,  -167,  -171,   159,   398,    40,    41,   303,  -171,    30,
      31,   160,   107,   107,   105,   377,   449,   107,   161,   406,
     105,   350,   107,   221,   353,   162,   411,   288,   289,   290,
     291,   292,   293,   351,   306,   307,   351,   502,   502,   538,
     539,    42,   107,   192,    32,   221,   221,   302,   107,   107,
     221,   221,   193,   197,    75,   330,    78,    79,   331,   332,
     105,    71,   105,   196,   105,   107,   105,    37,   333,    71,
      71,   107,   259,   226,   228,    38,    71,   304,   237,   236,
    -137,    71,    56,   238,   303,    39,   239,   509,   110,   240,
     272,    40,    41,   248,   260,   272,   494,   495,   465,   272,
     105,   467,   286,   498,   287,   339,   338,   346,   340,   465,
     341,   267,   467,   107,   361,   107,  -133,   107,   365,   468,
     371,   374,   130,   373,   302,   375,   131,   232,   305,   390,
     468,   391,   132,   396,   397,   401,   252,   133,   403,   134,
     135,   405,   408,   486,   487,   407,   136,   110,   110,   303,
     412,   107,   410,   137,   417,   288,   292,   422,  -190,   466,
     462,   423,   424,   105,   478,   105,   105,   489,   490,   491,
     466,   138,   493,   492,    71,   146,   499,   379,    71,   376,
     496,   497,   385,   131,   146,   139,   146,   506,   105,   302,
     140,   105,   507,   269,   133,   512,   134,   135,   311,   402,
     304,   304,   516,   136,   519,   553,   526,   521,   317,   522,
     137,   532,   321,   525,   107,   530,   107,   107,   326,   327,
     328,   329,   534,   536,   540,   544,   546,   558,   138,   560,
     562,    99,    99,   566,   304,   589,    99,   366,    87,   107,
     567,    99,   107,    71,   105,   105,   571,   140,    88,   572,
     105,   305,   305,    89,   580,    90,     9,   581,   221,   582,
      50,    99,    91,   601,    34,    71,    71,    99,    99,    92,
      84,   505,   480,   579,   545,   194,   349,   409,   221,   344,
     515,   511,   600,   457,    99,   305,   556,    93,   395,   552,
      99,   393,   128,    94,     0,   107,   107,   148,     0,     0,
     500,    95,     0,     0,   131,   105,    96,   105,    97,   177,
     188,   105,     0,     0,     0,   133,     0,   134,   135,     0,
       0,   105,     0,     0,   136,   311,     0,   105,   105,     0,
      99,   137,    99,     0,    99,   317,    99,     0,     0,   321,
     177,   322,   323,   324,   325,   326,   327,   328,   329,   138,
       0,     0,   304,     0,     0,   501,     0,     0,   107,     0,
       0,     0,   107,     0,     0,     0,   105,   105,   140,     0,
      99,   130,   107,     0,     0,   131,     0,     0,   107,   107,
       0,   132,     0,     0,     0,     0,   133,   299,   134,   135,
     188,     0,     0,     0,     0,   136,     0,    87,     0,     0,
       0,   100,   137,   305,     0,     0,   122,   177,     0,     0,
       0,   127,    89,     0,    90,     9,     0,   107,   107,     0,
     138,    91,   177,   105,     0,   105,   105,     0,    92,   304,
       0,   157,    87,    99,     0,    99,    99,   163,   164,   140,
       0,     0,    88,     0,     0,     0,    93,    89,     0,    90,
       9,     0,   463,     0,     0,     0,    91,     0,    99,     0,
       0,    99,     0,    92,   105,    96,   105,     0,     0,     0,
       0,     0,     0,     0,   107,   105,   107,   107,     0,     0,
     305,    93,     0,     0,     0,     0,     0,    94,     0,     0,
       0,     0,     0,     0,   304,   126,     0,     0,     0,     0,
      96,     0,    97,     0,   276,     0,   285,     0,     0,     0,
       0,   299,   188,     0,    99,    99,     0,   107,     0,     0,
      99,     0,     0,     0,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   299,   305,   450,   454,     0,   456,
       0,   450,     0,   459,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   165,     0,    99,   483,    99,     0,     0,
       0,    99,   177,   177,     0,     0,     0,    88,   177,     0,
       0,    99,     0,     0,   166,     9,     0,    99,    99,     0,
       0,    91,     0,   399,     0,   285,   400,     0,   167,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   168,   169,     0,   170,   171,     0,   415,   172,
       0,   416,   173,     0,     0,     0,    99,    99,     0,     0,
       0,     0,     0,   174,   175,   176,     0,     0,     0,   199,
       0,   165,     0,   200,  -221,     0,     0,    28,   201,     0,
    -221,   202,   299,   203,   204,    88,   205,   206,   207,     0,
       0,     0,   166,     9,     0,     0,     0,   208,   209,    91,
     210,    30,    31,     0,   460,   461,   167,     0,     0,     0,
       0,     0,     0,    99,     0,    99,    99,     0,     0,     0,
     168,   169,     0,   170,   171,     0,     0,   172,     0,   130,
     173,     0,     0,   131,   211,     0,  -221,     0,     0,   132,
    -221,   174,   175,   176,   133,     0,   134,   135,     0,     0,
       0,     0,     0,   136,    99,     0,    99,     0,     0,   299,
     234,     0,     0,   568,   569,    99,     0,     0,     0,     0,
       0,   513,     0,     0,     0,     0,   177,   177,   138,     0,
       0,   520,     0,     0,   599,     0,     0,   523,   524,     0,
       0,     0,     0,     0,     0,     0,     0,   140,   199,     0,
     165,     0,   200,     0,     0,     0,    28,   201,   587,   588,
     202,     0,   203,   204,    88,   205,   206,   207,     0,     0,
       0,   166,     9,     0,   299,     0,   208,   209,    91,   210,
      30,    31,     0,     0,     0,   167,     0,   606,   607,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   168,
     169,     0,   170,   171,     0,     0,   172,   362,     0,   173,
       0,  -245,     0,   211,     0,  -221,     0,     0,     0,  -221,
     174,   175,   176,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   561,     0,   563,   564,     0,   310,   311,
       0,   312,   363,   313,   314,   315,     0,   364,   316,   317,
     318,   319,   320,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   165,     0,     0,     0,    87,     0,     0,
       0,     0,     0,  -245,     0,     0,   584,    88,     0,   500,
    -245,     0,    89,   131,   294,     9,     0,     0,     0,     0,
       0,    91,     0,   527,   133,     0,   134,   135,   295,     0,
       0,     0,     0,   136,   165,     0,     0,     0,    87,     0,
     137,     0,   168,   169,     0,   170,   296,     0,    88,   172,
       0,     0,   297,    89,     0,   294,     9,     0,   138,     0,
     165,     0,    91,   174,   175,   298,     0,     0,   108,   295,
       0,     0,     0,     0,    88,     0,     0,   140,     0,     0,
       0,   166,     9,   168,   169,     0,   170,   296,    91,     0,
     172,     0,     0,   297,     0,   167,     0,     0,     0,     0,
       0,     0,     0,     0,   174,   175,   298,   165,     0,   168,
     169,   162,   170,   171,     0,     0,   172,     0,     0,   173,
       0,    88,     0,     0,     0,     0,     0,     0,   166,     9,
     174,   175,   176,   165,     0,    91,     0,     0,     0,     0,
       0,     0,   167,     0,     0,     0,     0,    88,     0,     0,
       0,     0,     0,     0,   166,     9,   168,   169,   574,   170,
     171,    91,     0,   172,     0,     0,   173,     0,   167,     0,
       0,     0,     0,   165,     0,     0,     0,   174,   175,   176,
       0,     0,   168,   169,     0,   170,   171,    88,     0,   172,
       0,     0,   173,     0,   166,     9,     0,    87,   575,     0,
       0,    91,     0,   174,   175,   176,     0,    88,   167,     0,
       0,     0,    89,     0,    90,     9,     0,     0,     0,     0,
       0,    91,   168,   169,     0,   170,   171,     0,    92,   172,
       0,     0,   173,     0,     0,     0,     0,     0,    87,     0,
       0,     0,   108,   174,   175,   176,    93,     0,    88,     0,
       0,     0,    94,    89,     0,    90,     9,     0,    87,     0,
       0,     0,    91,     0,     0,    96,     0,   414,    88,    92,
       0,     0,     0,    89,     0,    90,     9,     0,     0,     0,
      87,     0,    91,     0,   261,     0,     0,    93,     0,    92,
      88,     0,     0,    94,    88,    89,     0,    90,     9,    89,
       0,    90,     9,     0,    91,     0,    96,    93,    91,     0,
       0,   156,     0,    94,     0,    92,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    96,     0,     0,    93,
       0,     0,     0,    93,     0,    94,     0,     0,     0,   262,
       0,     0,     0,     0,   310,   311,     0,   312,    96,   313,
     314,   315,    96,     0,   316,   317,   318,   319,   320,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,   310,   311,     0,   312,
     529,   313,   314,   315,     0,   533,   316,   317,   318,   319,
     320,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,   310,   311,     0,   312,     0,   313,   314,
     315,     0,   529,   316,   317,   318,   319,   320,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,     0,     0,
     310,   311,     0,   312,     0,   313,   314,   315,     0,   608,
     316,   317,   318,   319,   320,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,   310,   311,     0,
     312,     0,   313,   314,   315,     0,   609,   316,   317,   318,
     319,   320,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,     0,   310,   311,   535,   312,     0,   313,   314,
     315,     0,     0,   316,   317,   318,   319,   320,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   310,   311,
       0,   312,     0,   313,   314,   315,     0,     0,   316,   317,
     318,   319,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   311,     0,   312,     0,   313,   314,   315,
       0,     0,   316,   317,   318,   319,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   311,     0,     0,
       0,   313,   314,   315,     0,     0,   316,   317,   318,   319,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329
};

static const yytype_int16 yycheck[] =
{
       5,   234,     7,   116,   156,   330,    95,   156,    65,    61,
     236,    16,   159,    28,   401,   176,    96,    22,   489,   338,
     352,   409,   333,    28,    29,    30,    31,   415,    25,    29,
     110,     8,    37,    38,    39,    40,    41,   126,    53,     0,
       3,   360,   173,    22,    71,   158,     8,   159,    53,   161,
      77,    68,     3,    58,    27,    72,    61,    63,     8,   352,
      65,    27,   355,     3,     6,   156,   359,    25,    73,    74,
      12,    77,    77,    25,    79,    72,     3,    82,    25,    25,
       6,     6,   173,    27,    25,   197,    12,    12,   200,   201,
      34,    35,    97,    70,   206,    73,   176,    97,    25,    77,
      44,    79,    46,    82,   193,    63,   494,   495,    70,   580,
     581,   116,   117,    76,    65,    77,    21,    68,    21,   208,
      70,    72,    63,   448,   129,   130,    68,    77,     3,     3,
      72,    78,    78,   138,   139,    62,     3,   298,    65,   154,
     145,   146,    86,    68,   149,    25,    72,    72,     3,   154,
      25,    25,   130,   158,   159,    25,   161,    68,    25,    69,
     138,    72,    17,   396,    63,   296,   297,   145,   146,    24,
      25,   228,    71,   560,   226,    69,    31,   121,    77,    53,
      25,   125,    25,    63,   571,    25,    56,   192,    63,    25,
      65,   196,   197,    25,   346,   200,   201,   346,    65,   330,
     525,   206,    72,    25,    25,   296,   297,    62,    68,   153,
       3,    28,   544,    56,   546,   346,    69,    62,   298,   530,
      75,   226,    62,   228,    37,    38,    62,    40,    41,   234,
      62,   236,   237,   238,   239,   240,    53,    37,    66,   330,
      62,    62,   247,   248,    68,    68,   251,   252,    72,   401,
      62,   544,   401,   546,   573,   346,   489,   589,   405,    65,
     238,    62,    62,   352,   490,   590,    66,   296,   297,   247,
     401,    57,    58,   499,   593,   501,    62,    68,   361,   368,
     369,    67,   365,   366,    68,   374,     0,     1,    72,    63,
     403,     9,    63,   405,    62,     9,   589,    63,   410,    17,
      71,    87,   414,    17,    63,    71,    77,    93,    94,    27,
     401,    77,    71,    66,   258,    33,    34,   448,    77,    33,
      34,    75,    57,    58,   110,   558,   331,    62,    66,   273,
     116,   202,    67,   338,   205,     7,   280,   167,   168,   169,
     170,   171,   172,   202,   174,   175,   205,   580,   581,   462,
     463,    69,    87,    65,    68,   360,   361,   448,    93,    94,
     365,   366,    70,    63,    38,    62,    40,    41,    65,    66,
     156,   376,   158,    77,   160,   110,   162,     9,    75,   384,
     385,   116,   397,    68,    68,    17,   391,   173,    66,    62,
      65,   396,   397,    75,   525,    27,    66,   402,   403,     7,
     405,    33,    34,    70,    63,   410,   384,   385,   560,   414,
     196,   560,    63,   391,    75,    77,    66,    63,    76,   571,
      76,   156,   571,   158,    14,   160,    71,   162,    71,   560,
      63,    70,     7,    63,   525,    69,    11,    69,   173,     3,
     571,    76,    17,    63,    68,    63,    77,    22,    62,    24,
      25,    68,    25,   542,   543,    76,    31,   462,   463,   590,
       3,   196,    68,    38,    75,   295,   296,    63,    66,   560,
      62,    76,    76,   259,    37,   261,   262,    63,    62,    72,
     571,    56,    76,    68,   489,   490,    62,   492,   493,     7,
      72,    68,   497,    11,   499,    70,   501,    63,   284,   590,
      75,   287,    63,    25,    22,    72,    24,    25,    36,    65,
     296,   297,    72,    31,    76,   493,    63,    76,    46,    76,
      38,    72,    50,    77,   259,    77,   261,   262,    56,    57,
      58,    59,    76,    72,    37,    68,    68,    38,    56,    63,
      76,    57,    58,    63,   330,    68,    62,    68,     7,   284,
      63,    67,   287,   558,   340,   341,    63,    75,    17,    63,
     346,   296,   297,    22,    63,    24,    25,    63,   573,    63,
      25,    87,    31,    71,    18,   580,   581,    93,    94,    38,
      50,   397,   359,   548,   476,   110,   201,   277,   593,   196,
     410,   405,   590,   337,   110,   330,   497,    56,   252,   492,
     116,   248,    70,    62,    -1,   340,   341,    74,    -1,    -1,
       7,    70,    -1,    -1,    11,   401,    75,   403,    77,    95,
      96,   407,    -1,    -1,    -1,    22,    -1,    24,    25,    -1,
      -1,   417,    -1,    -1,    31,    36,    -1,   423,   424,    -1,
     156,    38,   158,    -1,   160,    46,   162,    -1,    -1,    50,
     126,    52,    53,    54,    55,    56,    57,    58,    59,    56,
      -1,    -1,   448,    -1,    -1,    62,    -1,    -1,   403,    -1,
      -1,    -1,   407,    -1,    -1,    -1,   462,   463,    75,    -1,
     196,     7,   417,    -1,    -1,    11,    -1,    -1,   423,   424,
      -1,    17,    -1,    -1,    -1,    -1,    22,   173,    24,    25,
     176,    -1,    -1,    -1,    -1,    31,    -1,     7,    -1,    -1,
      -1,    57,    38,   448,    -1,    -1,    62,   193,    -1,    -1,
      -1,    67,    22,    -1,    24,    25,    -1,   462,   463,    -1,
      56,    31,   208,   519,    -1,   521,   522,    -1,    38,   525,
      -1,    87,     7,   259,    -1,   261,   262,    93,    94,    75,
      -1,    -1,    17,    -1,    -1,    -1,    56,    22,    -1,    24,
      25,    -1,    62,    -1,    -1,    -1,    31,    -1,   284,    -1,
      -1,   287,    -1,    38,   560,    75,   562,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   571,   521,   522,    -1,    -1,
     525,    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    70,    -1,    -1,    -1,    -1,
      75,    -1,    77,    -1,   160,    -1,   162,    -1,    -1,    -1,
      -1,   297,   298,    -1,   340,   341,    -1,   562,    -1,    -1,
     346,    -1,    -1,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   590,   332,   333,    -1,   335,
      -1,   337,    -1,   339,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,   401,   362,   403,    -1,    -1,
      -1,   407,   368,   369,    -1,    -1,    -1,    17,   374,    -1,
      -1,   417,    -1,    -1,    24,    25,    -1,   423,   424,    -1,
      -1,    31,    -1,   259,    -1,   261,   262,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    53,    -1,    55,    56,    -1,   284,    59,
      -1,   287,    62,    -1,    -1,    -1,   462,   463,    -1,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,     1,
      -1,     3,    -1,     5,     6,    -1,    -1,     9,    10,    -1,
      12,    13,   448,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    34,    -1,   340,   341,    38,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,   522,    -1,    -1,    -1,
      52,    53,    -1,    55,    56,    -1,    -1,    59,    -1,     7,
      62,    -1,    -1,    11,    66,    -1,    68,    -1,    -1,    17,
      72,    73,    74,    75,    22,    -1,    24,    25,    -1,    -1,
      -1,    -1,    -1,    31,   560,    -1,   562,    -1,    -1,   525,
      38,    -1,    -1,   529,   530,   571,    -1,    -1,    -1,    -1,
      -1,   407,    -1,    -1,    -1,    -1,   542,   543,    56,    -1,
      -1,   417,    -1,    -1,   590,    -1,    -1,   423,   424,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,     1,    -1,
       3,    -1,     5,    -1,    -1,    -1,     9,    10,   574,   575,
      13,    -1,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    24,    25,    -1,   590,    -1,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    38,    -1,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    -1,    59,     4,    -1,    62,
      -1,     8,    -1,    66,    -1,    68,    -1,    -1,    -1,    72,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,   522,    -1,    35,    36,
      -1,    38,    39,    40,    41,    42,    -1,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,     3,    -1,    -1,    -1,     7,    -1,    -1,
      -1,    -1,    -1,    70,    -1,    -1,   562,    17,    -1,     7,
      77,    -1,    22,    11,    24,    25,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    33,    22,    -1,    24,    25,    38,    -1,
      -1,    -1,    -1,    31,     3,    -1,    -1,    -1,     7,    -1,
      38,    -1,    52,    53,    -1,    55,    56,    -1,    17,    59,
      -1,    -1,    62,    22,    -1,    24,    25,    -1,    56,    -1,
       3,    -1,    31,    73,    74,    75,    -1,    -1,    11,    38,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    75,    -1,    -1,
      -1,    24,    25,    52,    53,    -1,    55,    56,    31,    -1,
      59,    -1,    -1,    62,    -1,    38,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    74,    75,     3,    -1,    52,
      53,     7,    55,    56,    -1,    -1,    59,    -1,    -1,    62,
      -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,
      73,    74,    75,     3,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    -1,    -1,    24,    25,    52,    53,    28,    55,
      56,    31,    -1,    59,    -1,    -1,    62,    -1,    38,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    52,    53,    -1,    55,    56,    17,    -1,    59,
      -1,    -1,    62,    -1,    24,    25,    -1,     7,    28,    -1,
      -1,    31,    -1,    73,    74,    75,    -1,    17,    38,    -1,
      -1,    -1,    22,    -1,    24,    25,    -1,    -1,    -1,    -1,
      -1,    31,    52,    53,    -1,    55,    56,    -1,    38,    59,
      -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,     7,    -1,
      -1,    -1,    11,    73,    74,    75,    56,    -1,    17,    -1,
      -1,    -1,    62,    22,    -1,    24,    25,    -1,     7,    -1,
      -1,    -1,    31,    -1,    -1,    75,    -1,    77,    17,    38,
      -1,    -1,    -1,    22,    -1,    24,    25,    -1,    -1,    -1,
       7,    -1,    31,    -1,     7,    -1,    -1,    56,    -1,    38,
      17,    -1,    -1,    62,    17,    22,    -1,    24,    25,    22,
      -1,    24,    25,    -1,    31,    -1,    75,    56,    31,    -1,
      -1,    38,    -1,    62,    -1,    38,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    56,
      -1,    -1,    -1,    56,    -1,    62,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    -1,    35,    36,    -1,    38,    75,    40,
      41,    42,    75,    -1,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    36,    -1,    38,
      71,    40,    41,    42,    -1,    76,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    -1,    35,    36,    -1,    38,    -1,    40,    41,
      42,    -1,    71,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    -1,
      35,    36,    -1,    38,    -1,    40,    41,    42,    -1,    71,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    -1,    35,    36,    -1,
      38,    -1,    40,    41,    42,    -1,    71,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    35,    36,    63,    38,    -1,    40,    41,
      42,    -1,    -1,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    35,    36,
      -1,    38,    -1,    40,    41,    42,    -1,    -1,    45,    46,
      47,    48,    -1,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    36,    -1,    38,    -1,    40,    41,    42,
      -1,    -1,    45,    46,    47,    48,    -1,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    36,    -1,    -1,
      -1,    40,    41,    42,    -1,    -1,    45,    46,    47,    48,
      -1,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    80,    82,    83,     0,    27,    81,    27,    89,    25,
     134,    84,   134,    21,    90,    91,    21,    85,   157,    69,
     202,     3,    62,    65,    86,    88,   134,     1,     9,    17,
      33,    34,    68,    93,    94,   150,    69,     9,    17,    27,
      33,    34,    69,   189,    63,    86,    87,     3,    68,   179,
      89,     3,   179,    62,    97,   132,   134,   174,    62,   132,
     151,    62,    99,   100,   134,    62,    96,   174,   179,   179,
      92,   134,   200,   201,    62,   201,   134,   190,   201,   201,
      69,   179,    68,   179,    90,    63,    97,     7,    17,    22,
      24,    31,    38,    56,    62,    70,    75,    77,   134,   135,
     139,   143,   144,   145,   146,   147,   148,   152,    11,   129,
     134,   138,   139,   168,   169,   170,    62,    66,   153,    63,
     100,   160,   139,    63,    96,   158,    70,   139,   202,    65,
       7,    11,    17,    22,    24,    25,    31,    38,    56,    70,
      75,   191,   192,   193,   200,    78,   134,   194,   203,    62,
     191,   191,    86,    63,    68,   179,    38,   139,    62,    66,
      75,    66,     7,   139,   139,     3,    24,    38,    52,    53,
      55,    56,    59,    62,    73,    74,    75,   124,   125,   126,
     127,   135,   137,   147,   152,   155,   156,   175,   124,   138,
     181,   132,    65,    70,   129,   138,    77,    63,   170,     1,
       5,    10,    13,    15,    16,    18,    19,    20,    29,    30,
      32,    66,    94,   101,   103,   114,   117,   119,   122,   124,
     131,   134,   136,   171,   172,   175,    68,   179,    68,   179,
     175,    95,    69,   134,    38,   191,    62,    66,    75,    66,
       7,   191,     3,    53,   134,   199,     3,    76,    70,   191,
     191,    63,    77,   185,   203,   179,    97,    98,   159,   174,
      63,     7,    62,   141,   143,   144,   145,   152,   170,    25,
      72,   131,   134,   162,   164,   166,   139,    56,    72,   131,
     161,   163,   164,   165,   173,   139,    63,    75,   125,   125,
     125,   125,   125,   125,    24,    38,    56,    62,    75,   124,
     128,   140,   144,   146,   147,   152,   125,   125,   138,   181,
      35,    36,    38,    40,    41,    42,    45,    46,    47,    48,
      49,    50,    52,    53,    54,    55,    56,    57,    58,    59,
      62,    65,    66,    75,    37,    62,    66,   130,    66,    77,
      76,    76,   134,   175,   168,   131,    63,   131,   133,   133,
     126,   127,   115,   126,   131,   118,   175,   182,   123,   120,
     104,    14,     4,    39,    44,    71,    68,    72,     8,    70,
     100,    63,    96,    63,    70,    69,     7,   192,   185,   134,
     187,   196,   205,   191,    78,   134,   186,   195,   204,   191,
       3,    76,   191,   199,   134,   194,    63,    68,   179,   139,
     139,    63,    65,    62,   167,    68,   179,    76,    25,   165,
      68,   179,     3,   188,    77,   139,   139,    75,   140,   140,
     138,   181,    63,    76,    76,   124,   124,   124,   124,   124,
     124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
     124,   124,   124,   124,   124,   128,   176,   183,    62,   134,
     124,   149,   177,   178,   124,   149,   124,   178,   172,   124,
     139,   139,    62,    62,   142,   143,   144,   145,   146,   154,
     101,   111,   112,   113,   175,   184,   116,   184,    37,   105,
     116,   172,   171,   124,   171,   171,   175,   175,   175,    63,
      62,    72,    68,    76,   191,   191,    72,    68,   191,    62,
       7,    62,   192,   197,   198,    98,    63,    63,   154,   134,
     170,   166,    72,   139,   188,   163,    72,   131,   188,    76,
     139,    76,    76,   139,   139,    77,    63,    33,   128,    71,
      77,   180,    72,    76,    76,    63,    72,    72,   170,   170,
      37,   109,     8,    70,    68,   109,    68,   106,   121,    72,
     197,   185,   196,   191,   188,   188,   195,   185,    38,   185,
      63,   139,    76,   139,   139,   128,    63,    63,   124,   124,
     149,    63,    63,   110,    28,    28,   184,   184,   108,   105,
      63,    63,    63,   154,   139,   154,   172,   124,   124,    68,
       6,    12,    72,   102,   107,   197,   197,    72,   184,   135,
     176,    71,   172,     8,    70,    71,   124,   124,    71,    71
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 125 "go.y"
    {
		xtop = concat(xtop, (yyvsp[(4) - (4)].list));
	}
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 131 "go.y"
    {
		prevlineno = lineno;
		yyerror("package statement must be first");
		mkpackage("main");
	}
    break;

  case 4:

/* Line 1455 of yacc.c  */
#line 137 "go.y"
    {
		mkpackage((yyvsp[(2) - (2)].sym)->name);
	}
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 147 "go.y"
    {
		cannedimports("runtime.builtin", runtimeimport);
	}
    break;

  case 6:

/* Line 1455 of yacc.c  */
#line 152 "go.y"
    {
		pkgimportname = S;
	}
    break;

  case 12:

/* Line 1455 of yacc.c  */
#line 166 "go.y"
    {
		Sym *import, *my;
		Node *pack;

		import = pkgimportname;
		my = pkgmyname;
		pkgmyname = S;
		pkgimportname = S;

		if(import == S)
			break;

		pack = nod(OPACK, N, N);
		pack->sym = import;
		pack->lineno = (yyvsp[(1) - (3)].lint);

		if(my == S)
			my = import;
		if(my->name[0] == '.') {
			importdot(import, pack);
			break;
		}
		if(my->name[0] == '_' && my->name[1] == '\0')
			break;

		// Can end up with my->def->op set to ONONAME
		// if one package refers to p without importing it.
		// Don't want to give an error on a good import
		// in another file.
		if(my->def && my->def->op != ONONAME) {
			lineno = (yyvsp[(1) - (3)].lint);
			redeclare(my, "as imported package name");
		}
		my->def = pack;
		my->lastlineno = (yyvsp[(1) - (3)].lint);
		import->block = 1;	// at top level
	}
    break;

  case 15:

/* Line 1455 of yacc.c  */
#line 211 "go.y"
    {
		// import with original name
		(yyval.lint) = parserline();
		pkgimportname = S;
		pkgmyname = S;
		importfile(&(yyvsp[(1) - (1)].val), (yyval.lint));
	}
    break;

  case 16:

/* Line 1455 of yacc.c  */
#line 219 "go.y"
    {
		// import with given name
		(yyval.lint) = parserline();
		pkgimportname = S;
		pkgmyname = (yyvsp[(1) - (2)].sym);
		importfile(&(yyvsp[(2) - (2)].val), (yyval.lint));
	}
    break;

  case 17:

/* Line 1455 of yacc.c  */
#line 227 "go.y"
    {
		// import into my name space
		(yyval.lint) = parserline();
		pkgmyname = lookup(".");
		importfile(&(yyvsp[(2) - (2)].val), (yyval.lint));
	}
    break;

  case 18:

/* Line 1455 of yacc.c  */
#line 236 "go.y"
    {
		pkgimportname = (yyvsp[(2) - (2)].sym);
		if(strcmp((yyvsp[(2) - (2)].sym)->name, "main") == 0)
			yyerror("cannot import package main");

		// TODO(rsc): This should go away once we get
		// rid of the global package name space.
		if(strcmp((yyvsp[(2) - (2)].sym)->name, package) == 0 && strcmp(package, "runtime") != 0)
			yyerror("package cannot import itself");
	}
    break;

  case 19:

/* Line 1455 of yacc.c  */
#line 248 "go.y"
    {
		defercheckwidth();
	}
    break;

  case 20:

/* Line 1455 of yacc.c  */
#line 252 "go.y"
    {
		resumecheckwidth();
		checkimports();
		unimportfile();
	}
    break;

  case 21:

/* Line 1455 of yacc.c  */
#line 258 "go.y"
    {
		defercheckwidth();
	}
    break;

  case 22:

/* Line 1455 of yacc.c  */
#line 262 "go.y"
    {
		resumecheckwidth();
		checkimports();
	}
    break;

  case 24:

/* Line 1455 of yacc.c  */
#line 273 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (2)].node));
	}
    break;

  case 25:

/* Line 1455 of yacc.c  */
#line 277 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 26:

/* Line 1455 of yacc.c  */
#line 281 "go.y"
    {
		yyerror("empty top-level declaration");
		(yyval.list) = nil;
	}
    break;

  case 27:

/* Line 1455 of yacc.c  */
#line 288 "go.y"
    {
		(yyval.list) = (yyvsp[(2) - (2)].list);
		if(yylast == LSEMIBRACE)
			yyoptsemi(0);
	}
    break;

  case 28:

/* Line 1455 of yacc.c  */
#line 294 "go.y"
    {
		(yyval.list) = (yyvsp[(3) - (5)].list);
		yyoptsemi(0);
	}
    break;

  case 29:

/* Line 1455 of yacc.c  */
#line 299 "go.y"
    {
		(yyval.list) = nil;
		yyoptsemi(0);
	}
    break;

  case 30:

/* Line 1455 of yacc.c  */
#line 304 "go.y"
    {
		(yyval.list) = (yyvsp[(2) - (2)].list);
		iota = 0;
		lastconst = nil;
	}
    break;

  case 31:

/* Line 1455 of yacc.c  */
#line 310 "go.y"
    {
		(yyval.list) = (yyvsp[(3) - (5)].list);
		iota = 0;
		lastconst = nil;
		yyoptsemi(0);
	}
    break;

  case 32:

/* Line 1455 of yacc.c  */
#line 317 "go.y"
    {
		(yyval.list) = concat((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].list));
		iota = 0;
		lastconst = nil;
		yyoptsemi(0);
	}
    break;

  case 33:

/* Line 1455 of yacc.c  */
#line 324 "go.y"
    {
		(yyval.list) = nil;
		yyoptsemi(0);
	}
    break;

  case 34:

/* Line 1455 of yacc.c  */
#line 329 "go.y"
    {
		(yyval.list) = list1((yyvsp[(2) - (2)].node));
		if(yylast == LSEMIBRACE)
			yyoptsemi(0);
	}
    break;

  case 35:

/* Line 1455 of yacc.c  */
#line 335 "go.y"
    {
		(yyval.list) = (yyvsp[(3) - (5)].list);
		yyoptsemi(0);
	}
    break;

  case 36:

/* Line 1455 of yacc.c  */
#line 340 "go.y"
    {
		(yyval.list) = nil;
		yyoptsemi(0);
	}
    break;

  case 37:

/* Line 1455 of yacc.c  */
#line 346 "go.y"
    {
		if(yylast == LSEMIBRACE)
			yyoptsemi('=');
	}
    break;

  case 38:

/* Line 1455 of yacc.c  */
#line 353 "go.y"
    {
		(yyval.list) = variter((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].node), nil);
	}
    break;

  case 39:

/* Line 1455 of yacc.c  */
#line 357 "go.y"
    {
		(yyval.list) = variter((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].node), (yyvsp[(5) - (5)].list));
	}
    break;

  case 40:

/* Line 1455 of yacc.c  */
#line 361 "go.y"
    {
		(yyval.list) = variter((yyvsp[(1) - (3)].list), nil, (yyvsp[(3) - (3)].list));
	}
    break;

  case 41:

/* Line 1455 of yacc.c  */
#line 367 "go.y"
    {
		(yyval.list) = constiter((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].node), (yyvsp[(4) - (4)].list));
	}
    break;

  case 42:

/* Line 1455 of yacc.c  */
#line 371 "go.y"
    {
		(yyval.list) = constiter((yyvsp[(1) - (3)].list), N, (yyvsp[(3) - (3)].list));
	}
    break;

  case 44:

/* Line 1455 of yacc.c  */
#line 378 "go.y"
    {
		(yyval.list) = constiter((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node), nil);
	}
    break;

  case 45:

/* Line 1455 of yacc.c  */
#line 382 "go.y"
    {
		(yyval.list) = constiter((yyvsp[(1) - (1)].list), N, nil);
	}
    break;

  case 46:

/* Line 1455 of yacc.c  */
#line 388 "go.y"
    {
		// different from dclname because the name
		// becomes visible right here, not at the end
		// of the declaration.
		(yyval.node) = typedcl0((yyvsp[(1) - (1)].sym));
	}
    break;

  case 47:

/* Line 1455 of yacc.c  */
#line 397 "go.y"
    {
		(yyval.node) = typedcl1((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node), 1);
	}
    break;

  case 48:

/* Line 1455 of yacc.c  */
#line 403 "go.y"
    {
		(yyval.node) = (yyvsp[(1) - (1)].node);
	}
    break;

  case 49:

/* Line 1455 of yacc.c  */
#line 407 "go.y"
    {
		(yyval.node) = nod(OASOP, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
		(yyval.node)->etype = (yyvsp[(2) - (3)].lint);			// rathole to pass opcode
	}
    break;

  case 50:

/* Line 1455 of yacc.c  */
#line 412 "go.y"
    {
		if((yyvsp[(1) - (3)].list)->next == nil && (yyvsp[(3) - (3)].list)->next == nil) {
			// simple
			(yyval.node) = nod(OAS, (yyvsp[(1) - (3)].list)->n, (yyvsp[(3) - (3)].list)->n);
			break;
		}
		// multiple
		(yyval.node) = nod(OAS2, N, N);
		(yyval.node)->list = (yyvsp[(1) - (3)].list);
		(yyval.node)->rlist = (yyvsp[(3) - (3)].list);
	}
    break;

  case 51:

/* Line 1455 of yacc.c  */
#line 424 "go.y"
    {
		if((yyvsp[(3) - (3)].list)->n->op == OTYPESW) {
			if((yyvsp[(3) - (3)].list)->next != nil)
				yyerror("expr.(type) must be alone in list");
			else if((yyvsp[(1) - (3)].list)->next != nil)
				yyerror("argument count mismatch: %d = %d", count((yyvsp[(1) - (3)].list)), 1);
			(yyval.node) = nod(OTYPESW, (yyvsp[(1) - (3)].list)->n, (yyvsp[(3) - (3)].list)->n->right);
			break;
		}
		(yyval.node) = colas((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list));
	}
    break;

  case 52:

/* Line 1455 of yacc.c  */
#line 436 "go.y"
    {
		(yyval.node) = nod(OASOP, (yyvsp[(1) - (2)].node), nodintconst(1));
		(yyval.node)->etype = OADD;
	}
    break;

  case 53:

/* Line 1455 of yacc.c  */
#line 441 "go.y"
    {
		(yyval.node) = nod(OASOP, (yyvsp[(1) - (2)].node), nodintconst(1));
		(yyval.node)->etype = OSUB;
	}
    break;

  case 54:

/* Line 1455 of yacc.c  */
#line 448 "go.y"
    {
		Node *n;

		// will be converted to OCASE
		// right will point to next case
		// done in casebody()
		poptodcl();
		(yyval.node) = nod(OXCASE, N, N);
		(yyval.node)->list = (yyvsp[(2) - (3)].list);
		if(typesw != N && typesw->right != N && (n=typesw->right->left) != N) {
			// type switch - declare variable
			n = newname(n->sym);
			n->used = 1;	// TODO(rsc): better job here
			declare(n, dclcontext);
			(yyval.node)->nname = n;
		}
		break;
	}
    break;

  case 55:

/* Line 1455 of yacc.c  */
#line 467 "go.y"
    {
		// will be converted to OCASE
		// right will point to next case
		// done in casebody()
		poptodcl();
		(yyval.node) = nod(OXCASE, N, N);
		(yyval.node)->list = list1(nod(OAS, (yyvsp[(2) - (5)].node), (yyvsp[(4) - (5)].node)));
	}
    break;

  case 56:

/* Line 1455 of yacc.c  */
#line 476 "go.y"
    {
		// will be converted to OCASE
		// right will point to next case
		// done in casebody()
		poptodcl();
		(yyval.node) = nod(OXCASE, N, N);
		(yyval.node)->list = list1(colas(list1((yyvsp[(2) - (5)].node)), list1((yyvsp[(4) - (5)].node))));
	}
    break;

  case 57:

/* Line 1455 of yacc.c  */
#line 485 "go.y"
    {
		Node *n;

		poptodcl();
		(yyval.node) = nod(OXCASE, N, N);
		if(typesw != N && typesw->right != N && (n=typesw->right->left) != N) {
			// type switch - declare variable
			n = newname(n->sym);
			n->used = 1;	// TODO(rsc): better job here
			declare(n, dclcontext);
			(yyval.node)->nname = n;
		}
	}
    break;

  case 58:

/* Line 1455 of yacc.c  */
#line 501 "go.y"
    {
		markdcl();
	}
    break;

  case 59:

/* Line 1455 of yacc.c  */
#line 505 "go.y"
    {
		(yyval.node) = liststmt((yyvsp[(3) - (4)].list));
		popdcl();
		yyoptsemi(0);
	}
    break;

  case 60:

/* Line 1455 of yacc.c  */
#line 513 "go.y"
    {
		markdcl();
	}
    break;

  case 61:

/* Line 1455 of yacc.c  */
#line 517 "go.y"
    {
		(yyval.list) = (yyvsp[(3) - (4)].list);
		popdcl();
		yyoptsemi(0);
	}
    break;

  case 62:

/* Line 1455 of yacc.c  */
#line 525 "go.y"
    {
		(yyval.node) = (yyvsp[(1) - (2)].node);
		(yyval.node)->nbody = (yyvsp[(2) - (2)].list);
	}
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 531 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 64:

/* Line 1455 of yacc.c  */
#line 535 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));
	}
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 541 "go.y"
    {
		markdcl();
	}
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 545 "go.y"
    {
		(yyval.list) = (yyvsp[(3) - (4)].list);
		popdcl();
	}
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 552 "go.y"
    {
		(yyval.node) = nod(ORANGE, N, (yyvsp[(4) - (4)].node));
		(yyval.node)->list = (yyvsp[(1) - (4)].list);
		(yyval.node)->etype = 0;	// := flag
	}
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 558 "go.y"
    {
		(yyval.node) = nod(ORANGE, N, (yyvsp[(4) - (4)].node));
		(yyval.node)->list = (yyvsp[(1) - (4)].list);
		(yyval.node)->colas = 1;
		colasdefn((yyvsp[(1) - (4)].list), (yyval.node));
	}
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 567 "go.y"
    {
		// init ; test ; incr
		if((yyvsp[(5) - (5)].node) != N && (yyvsp[(5) - (5)].node)->colas != 0)
			yyerror("cannot declare in the for-increment");
		(yyval.node) = nod(OFOR, N, N);
		if((yyvsp[(1) - (5)].node) != N)
			(yyval.node)->ninit = list1((yyvsp[(1) - (5)].node));
		(yyval.node)->ntest = (yyvsp[(3) - (5)].node);
		(yyval.node)->nincr = (yyvsp[(5) - (5)].node);
	}
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 578 "go.y"
    {
		// normal test
		(yyval.node) = nod(OFOR, N, N);
		(yyval.node)->ntest = (yyvsp[(1) - (1)].node);
	}
    break;

  case 72:

/* Line 1455 of yacc.c  */
#line 587 "go.y"
    {
		(yyval.node) = (yyvsp[(1) - (2)].node);
		(yyval.node)->nbody = concat((yyval.node)->nbody, (yyvsp[(2) - (2)].list));
		yyoptsemi(0);
	}
    break;

  case 73:

/* Line 1455 of yacc.c  */
#line 595 "go.y"
    {
		markdcl();
	}
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 599 "go.y"
    {
		(yyval.node) = (yyvsp[(3) - (3)].node);
		popdcl();
	}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 606 "go.y"
    {
		// test
		(yyval.node) = nod(OIF, N, N);
		(yyval.node)->ntest = (yyvsp[(1) - (1)].node);
	}
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 612 "go.y"
    {
		// init ; test
		(yyval.node) = nod(OIF, N, N);
		if((yyvsp[(1) - (3)].node) != N)
			(yyval.node)->ninit = list1((yyvsp[(1) - (3)].node));
		(yyval.node)->ntest = (yyvsp[(3) - (3)].node);
	}
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 622 "go.y"
    {
		markdcl();
	}
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 626 "go.y"
    {
		(yyval.node) = (yyvsp[(3) - (4)].node);
		(yyval.node)->nbody = (yyvsp[(4) - (4)].list);
		// no popdcl; maybe there's an LELSE
		yyoptsemi(LELSE);
	}
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 635 "go.y"
    {
		markdcl();
	}
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 639 "go.y"
    {
		Node *n;
		n = (yyvsp[(3) - (3)].node)->ntest;
		if(n != N && n->op != OTYPESW)
			n = N;
		typesw = nod(OXXX, typesw, n);
	}
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 647 "go.y"
    {
		(yyval.node) = (yyvsp[(3) - (5)].node);
		(yyval.node)->op = OSWITCH;
		(yyval.node)->list = (yyvsp[(5) - (5)].list);
		typesw = typesw->left;
		popdcl();
	}
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 657 "go.y"
    {
		markdcl();
	}
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 661 "go.y"
    {
		(yyval.node) = nod(OSELECT, N, N);
		(yyval.node)->list = (yyvsp[(3) - (3)].list);
		popdcl();
	}
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 673 "go.y"
    {
		(yyval.node) = nod(OOROR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 677 "go.y"
    {
		(yyval.node) = nod(OANDAND, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 681 "go.y"
    {
		(yyval.node) = nod(OEQ, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 685 "go.y"
    {
		(yyval.node) = nod(ONE, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 689 "go.y"
    {
		(yyval.node) = nod(OLT, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 693 "go.y"
    {
		(yyval.node) = nod(OLE, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 697 "go.y"
    {
		(yyval.node) = nod(OGE, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 701 "go.y"
    {
		(yyval.node) = nod(OGT, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 705 "go.y"
    {
		(yyval.node) = nod(OADD, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 709 "go.y"
    {
		(yyval.node) = nod(OSUB, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 713 "go.y"
    {
		(yyval.node) = nod(OOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 717 "go.y"
    {
		(yyval.node) = nod(OXOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 721 "go.y"
    {
		(yyval.node) = nod(OMUL, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 725 "go.y"
    {
		(yyval.node) = nod(ODIV, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 729 "go.y"
    {
		(yyval.node) = nod(OMOD, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 733 "go.y"
    {
		(yyval.node) = nod(OAND, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 737 "go.y"
    {
		(yyval.node) = nod(OANDNOT, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 741 "go.y"
    {
		(yyval.node) = nod(OLSH, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 745 "go.y"
    {
		(yyval.node) = nod(ORSH, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 749 "go.y"
    {
		(yyval.node) = nod(OSEND, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 756 "go.y"
    {
		(yyval.node) = nod(OIND, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 760 "go.y"
    {
		(yyval.node) = nod(OADDR, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 764 "go.y"
    {
		(yyval.node) = nod(OPLUS, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 768 "go.y"
    {
		(yyval.node) = nod(OMINUS, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 772 "go.y"
    {
		(yyval.node) = nod(ONOT, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 776 "go.y"
    {
		yyerror("the OCOM operator is ^");
		(yyval.node) = nod(OCOM, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 781 "go.y"
    {
		(yyval.node) = nod(OCOM, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 785 "go.y"
    {
		(yyval.node) = nod(ORECV, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 795 "go.y"
    {
		(yyval.node) = nod(OCALL, (yyvsp[(1) - (4)].node), N);
		(yyval.node)->list = (yyvsp[(3) - (4)].list);
	}
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 802 "go.y"
    {
		(yyval.node) = nodlit((yyvsp[(1) - (1)].val));
	}
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 807 "go.y"
    {
		if((yyvsp[(1) - (3)].node)->op == OPACK) {
			Sym *s;
			s = restrictlookup((yyvsp[(3) - (3)].sym)->name, (yyvsp[(1) - (3)].node)->sym->name);
			(yyvsp[(1) - (3)].node)->used = 1;
			(yyval.node) = oldname(s);
			break;
		}
		(yyval.node) = nod(OXDOT, (yyvsp[(1) - (3)].node), newname((yyvsp[(3) - (3)].sym)));
	}
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 818 "go.y"
    {
		(yyval.node) = (yyvsp[(2) - (3)].node);
	}
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 822 "go.y"
    {
		(yyval.node) = nod(ODOTTYPE, (yyvsp[(1) - (5)].node), (yyvsp[(4) - (5)].node));
	}
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 826 "go.y"
    {
		(yyval.node) = nod(OTYPESW, N, (yyvsp[(1) - (5)].node));
	}
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 830 "go.y"
    {
		(yyval.node) = nod(OINDEX, (yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node));
	}
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 834 "go.y"
    {
		(yyval.node) = nod(OSLICE, (yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node));
	}
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 839 "go.y"
    {
		// conversion
		(yyval.node) = nod(OCALL, (yyvsp[(1) - (4)].node), N);
		(yyval.node)->list = list1((yyvsp[(3) - (4)].node));
	}
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 845 "go.y"
    {
		// composite expression
		(yyval.node) = nod(OCOMPLIT, N, (yyvsp[(1) - (4)].node));
		(yyval.node)->list = (yyvsp[(3) - (4)].list);

		// If the opening brace was an LBODY,
		// set up for another one now that we're done.
		// See comment in lex.c about loophack.
		if((yyvsp[(2) - (4)].lint) == LBODY)
			loophack = 1;
	}
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 857 "go.y"
    {
		// composite expression
		(yyval.node) = nod(OCOMPLIT, N, (yyvsp[(1) - (4)].node));
		(yyval.node)->list = (yyvsp[(3) - (4)].list);
	}
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 873 "go.y"
    {
		(yyval.lint) = LBODY;
	}
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 877 "go.y"
    {
		(yyval.lint) = '{';
	}
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 888 "go.y"
    {
		(yyval.node) = newname((yyvsp[(1) - (1)].sym));
	}
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 894 "go.y"
    {
		(yyval.node) = dclname((yyvsp[(1) - (1)].sym));
	}
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 899 "go.y"
    {
		(yyval.node) = N;
	}
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 909 "go.y"
    {
		(yyval.node) = oldname((yyvsp[(1) - (1)].sym));
		if((yyval.node)->pack != N)
			(yyval.node)->pack->used = 1;
	}
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 920 "go.y"
    {
		// array literal
		(yyval.node) = nod(OTARRAY, (yyvsp[(2) - (4)].node), (yyvsp[(4) - (4)].node));
	}
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 925 "go.y"
    {
		// array literal of nelem
		(yyval.node) = nod(OTARRAY, (yyvsp[(2) - (4)].node), (yyvsp[(4) - (4)].node));
	}
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 930 "go.y"
    {
		// map literal
		(yyval.node) = nod(OTMAP, (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node));
	}
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 947 "go.y"
    {
		(yyval.node) = typenod(typ(TDDD));
	}
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 958 "go.y"
    {
		(yyval.node) = (yyvsp[(2) - (3)].node);
	}
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 967 "go.y"
    {
		(yyval.node) = nod(OIND, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 971 "go.y"
    {
		(yyval.node) = (yyvsp[(2) - (3)].node);
	}
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 981 "go.y"
    {
		(yyval.node) = (yyvsp[(2) - (3)].node);
	}
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 994 "go.y"
    {
		if((yyvsp[(1) - (3)].node)->op == OPACK) {
			Sym *s;
			s = restrictlookup((yyvsp[(3) - (3)].sym)->name, (yyvsp[(1) - (3)].node)->sym->name);
			(yyvsp[(1) - (3)].node)->used = 1;
			(yyval.node) = oldname(s);
			break;
		}
		(yyval.node) = nod(OXDOT, (yyvsp[(1) - (3)].node), newname((yyvsp[(3) - (3)].sym)));
	}
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 1007 "go.y"
    {
		(yyval.node) = nod(OTARRAY, (yyvsp[(2) - (4)].node), (yyvsp[(4) - (4)].node));
	}
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 1011 "go.y"
    {
		// array literal of nelem
		(yyval.node) = nod(OTARRAY, (yyvsp[(2) - (4)].node), (yyvsp[(4) - (4)].node));
	}
    break;

  case 169:

/* Line 1455 of yacc.c  */
#line 1016 "go.y"
    {
		(yyval.node) = nod(OTCHAN, (yyvsp[(3) - (3)].node), N);
		(yyval.node)->etype = Crecv;
	}
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 1021 "go.y"
    {
		(yyval.node) = nod(OTCHAN, (yyvsp[(3) - (3)].node), N);
		(yyval.node)->etype = Csend;
	}
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 1026 "go.y"
    {
		(yyval.node) = nod(OTMAP, (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node));
	}
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 1034 "go.y"
    {
		(yyval.node) = nod(OIND, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 1040 "go.y"
    {
		(yyval.node) = nod(OTCHAN, (yyvsp[(2) - (2)].node), N);
		(yyval.node)->etype = Cboth;
	}
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 1047 "go.y"
    {
		(yyval.node) = nod(OTSTRUCT, N, N);
		(yyval.node)->list = (yyvsp[(3) - (5)].list);
		// Distinguish closing brace in struct from
		// other closing braces by explicitly marking it.
		// Used above (yylast == LSEMIBRACE).
		yylast = LSEMIBRACE;
	}
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 1056 "go.y"
    {
		(yyval.node) = nod(OTSTRUCT, N, N);
		yylast = LSEMIBRACE;
	}
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 1063 "go.y"
    {
		(yyval.node) = nod(OTINTER, N, N);
		(yyval.node)->list = (yyvsp[(3) - (5)].list);
		yylast = LSEMIBRACE;
	}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 1069 "go.y"
    {
		(yyval.node) = nod(OTINTER, N, N);
		yylast = LSEMIBRACE;
	}
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 1076 "go.y"
    {
		(yyval.node) = nod(OKEY, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
	}
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 1087 "go.y"
    {
		(yyval.node) = (yyvsp[(2) - (3)].node);
		(yyval.node)->nbody = (yyvsp[(3) - (3)].list);
		funcbody((yyval.node));
	}
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 1095 "go.y"
    {
		Node *n;

		(yyval.node) = nod(ODCLFUNC, N, N);
		(yyval.node)->nname = (yyvsp[(1) - (5)].node);
		if((yyvsp[(3) - (5)].list) == nil && (yyvsp[(5) - (5)].list) == nil)
			(yyval.node)->nname = renameinit((yyvsp[(1) - (5)].node));
		n = nod(OTFUNC, N, N);
		n->list = (yyvsp[(3) - (5)].list);
		n->rlist = (yyvsp[(5) - (5)].list);
		// TODO: check if nname already has an ntype
		(yyval.node)->nname->ntype = n;
		funchdr((yyval.node));
	}
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 1110 "go.y"
    {
		Node *rcvr, *t;

		rcvr = (yyvsp[(2) - (8)].list)->n;
		if((yyvsp[(2) - (8)].list)->next != nil || (yyvsp[(2) - (8)].list)->n->op != ODCLFIELD) {
			yyerror("bad receiver in method");
			rcvr = N;
		}

		(yyval.node) = nod(ODCLFUNC, N, N);
		(yyval.node)->nname = methodname1((yyvsp[(4) - (8)].node), rcvr->right);
		t = nod(OTFUNC, rcvr, N);
		t->list = (yyvsp[(6) - (8)].list);
		t->rlist = (yyvsp[(8) - (8)].list);
		(yyval.node)->nname->ntype = t;
		(yyval.node)->shortname = (yyvsp[(4) - (8)].node);
		funchdr((yyval.node));
	}
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 1131 "go.y"
    {
		(yyval.node) = nod(OTFUNC, N, N);
		(yyval.node)->list = (yyvsp[(3) - (5)].list);
		(yyval.node)->rlist = (yyvsp[(5) - (5)].list);
	}
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 1138 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 1142 "go.y"
    {
		(yyval.list) = (yyvsp[(2) - (3)].list);
		if((yyval.list) == nil)
			(yyval.list) = list1(nod(OEMPTY, N, N));
		yyoptsemi(0);
	}
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 1151 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 1155 "go.y"
    {
		(yyval.list) = list1(nod(ODCLFIELD, N, (yyvsp[(1) - (1)].node)));
	}
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 1159 "go.y"
    {
		(yyval.list) = (yyvsp[(2) - (3)].list);
	}
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 1165 "go.y"
    {
		closurehdr((yyvsp[(1) - (1)].node));
	}
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 1171 "go.y"
    {
		(yyval.node) = closurebody((yyvsp[(3) - (4)].list));
	}
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 1183 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 1187 "go.y"
    {
		(yyval.list) = concat((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list));
		if(nsyntaxerrors == 0)
			testdclstack();
	}
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 1196 "go.y"
    {
		(yyval.list) = concat((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list));
	}
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 1203 "go.y"
    {
		(yyval.list) = concat((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list));
	}
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 1209 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 1213 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
	}
    break;

  case 201:

/* Line 1455 of yacc.c  */
#line 1220 "go.y"
    {
		(yyval.list) = concat((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list));
	}
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 1226 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 1230 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
	}
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 1236 "go.y"
    {
		NodeList *l;

		for(l=(yyvsp[(1) - (3)].list); l; l=l->next) {
			l->n = nod(ODCLFIELD, l->n, (yyvsp[(2) - (3)].node));
			l->n->val = (yyvsp[(3) - (3)].val);
		}
	}
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 1245 "go.y"
    {
		(yyvsp[(1) - (2)].node)->val = (yyvsp[(2) - (2)].val);
		(yyval.list) = list1((yyvsp[(1) - (2)].node));
	}
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 1250 "go.y"
    {
		(yyvsp[(2) - (3)].node)->right = nod(OIND, (yyvsp[(2) - (3)].node)->right, N);
		(yyvsp[(2) - (3)].node)->val = (yyvsp[(3) - (3)].val);
		(yyval.list) = list1((yyvsp[(2) - (3)].node));
	}
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 1258 "go.y"
    {
		Node *n;

		(yyval.sym) = (yyvsp[(1) - (1)].sym);
		n = oldname((yyvsp[(1) - (1)].sym));
		if(n->pack != N)
			n->pack->used = 1;
	}
    break;

  case 208:

/* Line 1455 of yacc.c  */
#line 1267 "go.y"
    {
		char *pkg;

		if((yyvsp[(1) - (3)].sym)->def == N || (yyvsp[(1) - (3)].sym)->def->op != OPACK) {
			yyerror("%S is not a package", (yyvsp[(1) - (3)].sym));
			pkg = (yyvsp[(1) - (3)].sym)->name;
		} else {
			(yyvsp[(1) - (3)].sym)->def->used = 1;
			pkg = (yyvsp[(1) - (3)].sym)->def->sym->name;
		}
		(yyval.sym) = restrictlookup((yyvsp[(3) - (3)].sym)->name, pkg);
	}
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 1282 "go.y"
    {
		(yyval.node) = embedded((yyvsp[(1) - (1)].sym));
	}
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 1288 "go.y"
    {
		(yyval.node) = nod(ODCLFIELD, (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node));
	}
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 1292 "go.y"
    {
		(yyval.node) = nod(ODCLFIELD, N, oldname((yyvsp[(1) - (1)].sym)));
	}
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 1298 "go.y"
    {
		// without func keyword
		(yyval.node) = nod(OTFUNC, fakethis(), N);
		(yyval.node)->list = (yyvsp[(2) - (4)].list);
		(yyval.node)->rlist = (yyvsp[(4) - (4)].list);
	}
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 1311 "go.y"
    {
		(yyval.node) = nod(ONONAME, N, N);
		(yyval.node)->sym = (yyvsp[(1) - (2)].sym);
		(yyval.node) = nod(OKEY, (yyval.node), (yyvsp[(2) - (2)].node));
	}
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 1317 "go.y"
    {
		(yyval.node) = nod(ONONAME, N, N);
		(yyval.node)->sym = (yyvsp[(1) - (2)].sym);
		(yyval.node) = nod(OKEY, (yyval.node), (yyvsp[(2) - (2)].node));
	}
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 1326 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 1330 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
	}
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 1335 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 1339 "go.y"
    {
		(yyval.list) = checkarglist((yyvsp[(1) - (1)].list));
	}
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 1347 "go.y"
    {
		(yyval.node) = N;
	}
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 1353 "go.y"
    {
		(yyval.node) = liststmt((yyvsp[(1) - (1)].list));
	}
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 1360 "go.y"
    {
		popdcl();
		(yyval.node) = (yyvsp[(1) - (1)].node);
	}
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 1365 "go.y"
    {
		popdcl();
		(yyval.node) = (yyvsp[(1) - (3)].node);
		(yyval.node)->nelse = list1((yyvsp[(3) - (3)].node));
	}
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 1371 "go.y"
    {
		(yyval.node) = N;
	}
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 1375 "go.y"
    {
		NodeList *l;

		l = list1(nod(OLABEL, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node)));
		if((yyvsp[(3) - (3)].node))
			l = list(l, (yyvsp[(3) - (3)].node));
		(yyval.node) = liststmt(l);
	}
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 1384 "go.y"
    {
		// will be converted to OFALL
		(yyval.node) = nod(OXFALL, N, N);
	}
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 1389 "go.y"
    {
		(yyval.node) = nod(OBREAK, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 1393 "go.y"
    {
		(yyval.node) = nod(OCONTINUE, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 1397 "go.y"
    {
		(yyval.node) = nod(OPROC, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 1401 "go.y"
    {
		(yyval.node) = nod(ODEFER, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 1405 "go.y"
    {
		(yyval.node) = nod(OGOTO, (yyvsp[(2) - (2)].node), N);
	}
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 1409 "go.y"
    {
		(yyval.node) = nod(ORETURN, N, N);
		(yyval.node)->list = (yyvsp[(2) - (2)].list);
	}
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 1416 "go.y"
    {
		(yyval.list) = nil;
		if((yyvsp[(1) - (1)].node) != N)
			(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 1422 "go.y"
    {
		(yyval.list) = (yyvsp[(1) - (3)].list);
		if((yyvsp[(3) - (3)].node) != N)
			(yyval.list) = list((yyval.list), (yyvsp[(3) - (3)].node));
	}
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 1430 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 1434 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
	}
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 1440 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 1444 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
	}
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 1450 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 1454 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
	}
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 1460 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 1464 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
	}
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 1473 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 1477 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 1481 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
	}
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 1485 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
	}
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 1490 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 1494 "go.y"
    {
		(yyval.list) = (yyvsp[(1) - (2)].list);
	}
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 1509 "go.y"
    {
		(yyval.node) = N;
	}
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 1515 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 1521 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 1527 "go.y"
    {
		(yyval.node) = N;
	}
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 1533 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 1539 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 1545 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 1551 "go.y"
    {
		(yyval.val).ctype = CTxxx;
	}
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 1564 "go.y"
    {
		importvar((yyvsp[(2) - (3)].sym), (yyvsp[(3) - (3)].type), PEXTERN);
	}
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 1568 "go.y"
    {
		importconst((yyvsp[(2) - (4)].sym), types[TIDEAL], (yyvsp[(4) - (4)].node));
	}
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 1572 "go.y"
    {
		importconst((yyvsp[(2) - (5)].sym), (yyvsp[(3) - (5)].type), (yyvsp[(5) - (5)].node));
	}
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 1576 "go.y"
    {
		importtype((yyvsp[(2) - (3)].type), (yyvsp[(3) - (3)].type));
	}
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 1580 "go.y"
    {
		importvar((yyvsp[(2) - (6)].sym), functype(N, (yyvsp[(4) - (6)].list), (yyvsp[(6) - (6)].list)), PFUNC);
	}
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 1584 "go.y"
    {
		if((yyvsp[(3) - (9)].list)->next != nil || (yyvsp[(3) - (9)].list)->n->op != ODCLFIELD) {
			yyerror("bad receiver in method");
			YYERROR;
		}
		importmethod((yyvsp[(5) - (9)].sym), functype((yyvsp[(3) - (9)].list)->n, (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].list)));
	}
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 1594 "go.y"
    {
		(yyval.type) = pkgtype((yyvsp[(1) - (1)].sym));
		importsym((yyvsp[(1) - (1)].sym), OTYPE);
	}
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 1605 "go.y"
    {
		(yyval.type) = pkgtype((yyvsp[(1) - (1)].sym));
	}
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 1609 "go.y"
    {
		// predefined name like uint8
		(yyvsp[(1) - (1)].sym) = pkglookup((yyvsp[(1) - (1)].sym)->name, "/builtin/");
		if((yyvsp[(1) - (1)].sym)->def == N || (yyvsp[(1) - (1)].sym)->def->op != OTYPE) {
			yyerror("%s is not a type", (yyvsp[(1) - (1)].sym)->name);
			(yyval.type) = T;
		} else
			(yyval.type) = (yyvsp[(1) - (1)].sym)->def->type;
	}
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 1619 "go.y"
    {
		(yyval.type) = aindex(N, (yyvsp[(3) - (3)].type));
	}
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 1623 "go.y"
    {
		(yyval.type) = aindex(nodlit((yyvsp[(2) - (4)].val)), (yyvsp[(4) - (4)].type));
	}
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 1627 "go.y"
    {
		(yyval.type) = maptype((yyvsp[(3) - (5)].type), (yyvsp[(5) - (5)].type));
	}
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 1631 "go.y"
    {
		(yyval.type) = dostruct((yyvsp[(3) - (4)].list), TSTRUCT);
	}
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 1635 "go.y"
    {
		(yyval.type) = dostruct((yyvsp[(3) - (4)].list), TINTER);
		(yyval.type) = sortinter((yyval.type));
	}
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 1640 "go.y"
    {
		(yyval.type) = ptrto((yyvsp[(2) - (2)].type));
	}
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 1644 "go.y"
    {
		(yyval.type) = typ(TCHAN);
		(yyval.type)->type = (yyvsp[(3) - (3)].type);
		(yyval.type)->chan = Crecv;
	}
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 1650 "go.y"
    {
		(yyval.type) = typ(TCHAN);
		(yyval.type)->type = (yyvsp[(3) - (3)].type);
		(yyval.type)->chan = Csend;
	}
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 1656 "go.y"
    {
		(yyval.type) = typ(TDDD);
	}
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 1662 "go.y"
    {
		(yyval.type) = typ(TCHAN);
		(yyval.type)->type = (yyvsp[(2) - (2)].type);
		(yyval.type)->chan = Cboth;
	}
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 1668 "go.y"
    {
		(yyval.type) = functype(nil, (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].list));
	}
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 1674 "go.y"
    {
		(yyval.node) = nod(ODCLFIELD, newname((yyvsp[(1) - (2)].sym)), typenod((yyvsp[(2) - (2)].type)));
	}
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 1678 "go.y"
    {
		(yyval.node) = nod(ODCLFIELD, N, typenod((yyvsp[(2) - (2)].type)));
	}
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 1684 "go.y"
    {
		(yyval.node) = nod(ODCLFIELD, newname((yyvsp[(1) - (3)].sym)), typenod((yyvsp[(2) - (3)].type)));
		(yyval.node)->val = (yyvsp[(3) - (3)].val);
	}
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 1689 "go.y"
    {
		Sym *s;

		s = (yyvsp[(2) - (3)].type)->sym;
		if(s == S && isptr[(yyvsp[(2) - (3)].type)->etype])
			s = (yyvsp[(2) - (3)].type)->type->sym;
		if(s && strcmp(s->package, "/builtin/") == 0)
			s = lookup(s->name);
		(yyval.node) = embedded(s);
		(yyval.node)->right = typenod((yyvsp[(2) - (3)].type));
		(yyval.node)->val = (yyvsp[(3) - (3)].val);
	}
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 1704 "go.y"
    {
		(yyval.node) = nod(ODCLFIELD, newname((yyvsp[(1) - (5)].sym)), typenod(functype(fakethis(), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].list))));
	}
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 1709 "go.y"
    {
		(yyval.list) = nil;
	}
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 1716 "go.y"
    {
		(yyval.list) = (yyvsp[(2) - (3)].list);
	}
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 1720 "go.y"
    {
		(yyval.list) = list1(nod(ODCLFIELD, N, typenod((yyvsp[(1) - (1)].type))));
	}
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 1726 "go.y"
    {
		(yyval.node) = nodlit((yyvsp[(1) - (1)].val));
	}
    break;

  case 308:

/* Line 1455 of yacc.c  */
#line 1730 "go.y"
    {
		(yyval.node) = nodlit((yyvsp[(2) - (2)].val));
		switch((yyval.node)->val.ctype){
		case CTINT:
			mpnegfix((yyval.node)->val.u.xval);
			break;
		case CTFLT:
			mpnegflt((yyval.node)->val.u.fval);
			break;
		default:
			yyerror("bad negated constant");
		}
	}
    break;

  case 309:

/* Line 1455 of yacc.c  */
#line 1744 "go.y"
    {
		(yyval.node) = oldname(pkglookup((yyvsp[(1) - (1)].sym)->name, "/builtin/"));
		if((yyval.node)->op != OLITERAL)
			yyerror("bad constant %S", (yyval.node)->sym);
	}
    break;

  case 310:

/* Line 1455 of yacc.c  */
#line 1752 "go.y"
    {
		(yyval.sym) = pkglookup((yyvsp[(3) - (3)].sym)->name, (yyvsp[(1) - (3)].sym)->name);
	}
    break;

  case 311:

/* Line 1455 of yacc.c  */
#line 1758 "go.y"
    {
		(yyval.sym) = (yyvsp[(1) - (1)].sym);
		structpkg = (yyval.sym)->package;
	}
    break;

  case 314:

/* Line 1455 of yacc.c  */
#line 1768 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 1772 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
	}
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 1778 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 1782 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
	}
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 1788 "go.y"
    {
		(yyval.list) = list1((yyvsp[(1) - (1)].node));
	}
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 1792 "go.y"
    {
		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
	}
    break;



/* Line 1455 of yacc.c  */
#line 4839 "y.tab.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



